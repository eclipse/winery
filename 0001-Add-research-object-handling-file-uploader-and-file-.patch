From 0a8776e5c539cda840361931b20da558e81874b0 Mon Sep 17 00:00:00 2001
From: Michael Zimmermann <micha89@gmail.com>
Date: Tue, 26 Apr 2022 10:59:58 +0200
Subject: [PATCH] =?UTF-8?q?Add=20research=20object=20handling,=20file=20up?=
 =?UTF-8?q?loader=20and=20file=20explorer=20components=20Co-authored-by:?=
 =?UTF-8?q?=20Pawel=20W=C3=B3jcik=20<st108520@stud.uni-stuttgart.de>=20Sig?=
 =?UTF-8?q?ned-off-by:=20Michael=20Zimmermann=20<micha89@gmail.com>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 NOTICE                                        |   3 +-
 docker/winery.yml.tpl                         |   1 +
 .../org/eclipse/winery/common/Constants.java  |   4 +
 .../src/main/resources/winery.yml             |   3 +-
 .../configuration.component.html              |   6 +-
 .../src/app/instance/instance.service.ts      |   3 +
 .../instanceHeader.component.ts               |   2 +
 .../researchObject.component.html             |  21 ++
 .../researchObject.component.ts               |  37 +++
 .../researchObject/researchObject.module.ts   |  60 +++++
 .../researchObject/researchObject.service.ts  | 100 +++++++
 .../researchObjectFiles.component.css         |  47 ++++
 .../researchObjectFiles.component.html        |  65 +++++
 .../researchObjectFiles.component.ts          | 116 +++++++++
 .../researchObjectMetaData.component.html     |  51 ++++
 .../researchObjectMetaData.component.ts       |  87 +++++++
 .../researchObjectPublication.component.html  |  42 +++
 .../researchObjectPublication.component.ts    |  83 ++++++
 .../researchObjectRouter.module.ts            |  54 ++++
 .../dialogs/confirmDialog.component.html      |  24 ++
 .../dialogs/confirmDialog.component.ts        |  27 ++
 .../dialogs/fileManagerDialog.component.css   |  31 +++
 .../dialogs/newFolderDialog.component.html    |  29 +++
 .../dialogs/newFolderDialog.component.ts      |  33 +++
 .../dialogs/renameDialog.component.html       |  30 +++
 .../dialogs/renameDialog.component.ts         |  33 +++
 .../fileManager/fileManager.component.css     |  86 +++++++
 .../fileManager/fileManager.component.html    | 141 ++++++++++
 .../fileManager/fileManager.component.ts      | 243 ++++++++++++++++++
 .../files/fileManager/fileManager.module.ts   |  68 +++++
 .../fileUploader/fileUploader.component.css   |  23 ++
 .../fileUploader/fileUploader.component.html  |  95 +++++++
 .../fileUploader/fileUploader.component.ts    |  77 ++++++
 .../files/fileUploader/fileUploader.module.ts |  37 +++
 .../src/app/model/fileApiData.ts              |  22 ++
 .../src/app/model/fileOrFolderElement.ts      |  19 ++
 .../src/app/model/researchObjectApiData.ts    |  28 ++
 .../src/app/model/subMenuItem.ts              |   3 +-
 .../WineryRepositoryConfiguration.service.ts  |   3 +-
 .../wineryRepository.feature.direct.ts        |   4 +-
 .../serviceTemplate.module.ts                 |   2 +
 .../serviceTemplateRouter.module.ts           |   9 +-
 .../src/css/wineryRepository.css              |   2 +
 .../package-lock.json                         | 101 +++++++-
 org.eclipse.winery.frontends/package.json     |   3 +
 .../pom.xml                                   |  20 +-
 .../researchobject/ResearchObjectModel.xsd    |  61 +++++
 .../selfservice}/SelfServiceModel.xsd         |   0
 .../src/test/java/.gitkeep                    |   0
 .../src/test/resources/logback-test.xml       |   0
 org.eclipse.winery.repository.rest/pom.xml    |   2 +-
 .../winery/repository/rest/RestUtils.java     | 143 +++++------
 .../rest/resources/apiData/FileApiData.java   |  23 ++
 .../apiData/FileOrFolderElementApiData.java   |  74 ++++++
 .../ResearchObjectResource.java               | 192 ++++++++++++++
 .../ServiceTemplateResource.java              |   7 +-
 .../nodetypes/NodeTypeResourceTest.java       |   2 +-
 .../policies/PoliciesResourceTest.java        |   2 +-
 .../nodetypes/baobab_tag_step3_values.json    |   7 +-
 .../nodetypes/baobab_tag_step5_values.json    |   2 +-
 .../policies/initialPolicy.json               |   2 +-
 org.eclipse.winery.repository/pom.xml         |   2 +-
 .../winery/repository/JAXBSupport.java        |   6 +-
 .../repository/backend/IRepository.java       |   7 +
 .../backend/ResearchObjectUtils.java          | 112 ++++++++
 .../AbstractFileBasedRepository.java          |  27 +-
 .../backend/filebased/GitBasedRepository.java |  16 ++
 .../elements/ResearchObjectDirectoryId.java   |  29 +++
 .../ResearchObjectFilesDirectoryId.java       |  28 ++
 .../repository/filebased/MultiRepository.java |  19 ++
 .../filebased/TenantRepository.java           |  16 ++
 .../winery/repository/xml/XmlRepository.java  |   5 +-
 pom.xml                                       |   4 +-
 73 files changed, 2659 insertions(+), 107 deletions(-)
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.component.html
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.component.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.module.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.service.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.css
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.html
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectMetaData.component.html
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectMetaData.component.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectPublication.component.html
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectPublication.component.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectRouter.module.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/confirmDialog.component.html
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/confirmDialog.component.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/fileManagerDialog.component.css
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/newFolderDialog.component.html
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/newFolderDialog.component.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/renameDialog.component.html
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/renameDialog.component.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.css
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.html
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.module.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.css
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.html
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.module.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/model/fileApiData.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/model/fileOrFolderElement.ts
 create mode 100644 org.eclipse.winery.frontends/app/tosca-management/src/app/model/researchObjectApiData.ts
 rename {org.eclipse.winery.model.selfservice => org.eclipse.winery.model.extension}/pom.xml (79%)
 create mode 100644 org.eclipse.winery.model.extension/src/main/resources/researchobject/ResearchObjectModel.xsd
 rename {org.eclipse.winery.model.selfservice/src/main/resources => org.eclipse.winery.model.extension/src/main/resources/selfservice}/SelfServiceModel.xsd (100%)
 rename {org.eclipse.winery.model.selfservice => org.eclipse.winery.model.extension}/src/test/java/.gitkeep (100%)
 rename {org.eclipse.winery.model.selfservice => org.eclipse.winery.model.extension}/src/test/resources/logback-test.xml (100%)
 create mode 100644 org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/apiData/FileApiData.java
 create mode 100644 org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/apiData/FileOrFolderElementApiData.java
 create mode 100644 org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/servicetemplates/ResearchObjectResource.java
 create mode 100644 org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/ResearchObjectUtils.java
 create mode 100644 org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/datatypes/ids/elements/ResearchObjectDirectoryId.java
 create mode 100644 org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/datatypes/ids/elements/ResearchObjectFilesDirectoryId.java

diff --git a/NOTICE b/NOTICE
index 5083a0edc..d9a9b9d2f 100644
--- a/NOTICE
+++ b/NOTICE
@@ -76,7 +76,7 @@ Copyright (c) 2019-2020 Felix Burk
 Copyright (c) 2019-2020 Johannes Hepp
 Copyright (c) 2019 Marcel Zeller
 Copyright (c) 2019 Markus Schütterle
-Copyright (c) 2019 Michael Zimmermann
+Copyright (c) 2019-2022 Michael Zimmermann
 Copyright (c) 2019 Ruben Verma
 Copyright (c) 2019 Sascha Zeller
 Copyright (c) 2019-2020 Tobias Mathony
@@ -91,6 +91,7 @@ Copyright (c) 2021 Timm Pankratz
 Copyright (c) 2021 Lavinia Stiliadou
 Copyright (c) 2022 Anatoli Babenia
 Copyright (c) 2022 Miles Stötzner
+Copyright (c) 2022 Pawel Wójcik
 
 == Third-party Content
 
diff --git a/docker/winery.yml.tpl b/docker/winery.yml.tpl
index f6d84515f..c8bd1c223 100644
--- a/docker/winery.yml.tpl
+++ b/docker/winery.yml.tpl
@@ -9,6 +9,7 @@ ui:
     patternRefinement: {{ .Env.WINERY_FEATURE_PATTERN_REFINEMENT }}
     problemDetection: {{ .Env.WINERY_FEATURE_PROBLEM_DETECTION }}
     radon: {{ .Env.WINERY_FEATURE_RADON }}
+    researchObject: {{ .Env.WINERY_FEATURE_RESEARCH_OBJECT }}
     splitting: {{ .Env.WINERY_FEATURE_SPLITTING }}
     testRefinement: {{ .Env.WINERY_FEATURE_TEST_REFINEMENT }}
     edmmModeling: {{ .Env.WINERY_FEATURE_EDMM_MODELING }}
diff --git a/org.eclipse.winery.common/src/main/java/org/eclipse/winery/common/Constants.java b/org.eclipse.winery.common/src/main/java/org/eclipse/winery/common/Constants.java
index 30ffc4a18..617cd0a71 100644
--- a/org.eclipse.winery.common/src/main/java/org/eclipse/winery/common/Constants.java
+++ b/org.eclipse.winery.common/src/main/java/org/eclipse/winery/common/Constants.java
@@ -80,6 +80,10 @@ public class Constants {
 
     public static final String DIRNAME_SELF_SERVICE_METADATA = "SELFSERVICE-Metadata";
 
+    public static final String DIRNAME_RESEARCH_OBJECT = "ResearchObject";
+    public static final String DIRNAME_RESEARCH_OBJECT_METADATA_FILE = "MetaData.xml";
+    public static final String DIRNAME_RESEARCH_OBJECT_FILES = "Files";
+    
     public static final String LICENSE_FILE_NAME = "LICENSE";
     public static final String README_FILE_NAME = "README.md";
 }
diff --git a/org.eclipse.winery.common/src/main/resources/winery.yml b/org.eclipse.winery.common/src/main/resources/winery.yml
index 53f798ddd..674116c38 100644
--- a/org.eclipse.winery.common/src/main/resources/winery.yml
+++ b/org.eclipse.winery.common/src/main/resources/winery.yml
@@ -11,9 +11,10 @@ ui:
     testRefinement: false
     completion: false
     accountability: false
-    compliance: false   
+    compliance: false
     placement: false
     radon: false
+    researchObject: false
     patternDetection: true
     liveModeling: true
     propertyCheck: true
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/admin/configuration/configuration.component.html b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/admin/configuration/configuration.component.html
index 5d04940f3..2f4bb66e3 100644
--- a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/admin/configuration/configuration.component.html
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/admin/configuration/configuration.component.html
@@ -1,5 +1,5 @@
 <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-  ~ Copyright (c) 2019-2021 Contributors to the Eclipse Foundation
+  ~ Copyright (c) 2019-2022 Contributors to the Eclipse Foundation
   ~
   ~ See the NOTICE file(s) distributed with this work for additional
   ~ information regarding copyright ownership.
@@ -111,6 +111,10 @@
            name="patternDetection"
            [checked]="config.features.patternDetection">
     <label for="patternDetection">Pattern Detection</label>
+    <br>
+    <input type="checkbox" [(ngModel)]="config.features.researchObject" id="researchObject" name="researchObject"
+           [checked]="config.features.researchObject">
+    <label for="researchObject">Research Object</label>
 </div>
 <div>
     <button class="btn btn-primary" (click)="saveChanges()">Save Changes</button>
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/instance.service.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/instance.service.ts
index cb7f2e0b3..578c57dd0 100644
--- a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/instance.service.ts
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/instance.service.ts
@@ -76,6 +76,9 @@ export class InstanceService {
                     if (this.configurationService.configuration.features.nfv) {
                         subMenu.push(SubMenuItems.threatModeling);
                     }
+                    if (this.configurationService.configuration.features.researchObject) {
+                        subMenu.push(SubMenuItems.researchObject);
+                    }
                 }
                 break;
             case ToscaTypes.RelationshipType:
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/instanceHeader/instanceHeader.component.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/instanceHeader/instanceHeader.component.ts
index aa13444a4..28bb190b5 100644
--- a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/instanceHeader/instanceHeader.component.ts
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/instanceHeader/instanceHeader.component.ts
@@ -59,6 +59,7 @@ export class InstanceHeaderComponent implements OnInit {
     showEdmmExport: boolean;
     requiresTabFix = false;
     radon: boolean;
+    researchObject: boolean;
     toscaTypes = ToscaTypes;
 
     toscaLightCompatibilityErrorReportModalRef: BsModalRef;
@@ -99,6 +100,7 @@ export class InstanceHeaderComponent implements OnInit {
         }
 
         this.radon = this.configurationService.configuration.features.radon;
+        this.researchObject = this.configurationService.configuration.features.researchObject;
     }
 
     removeConfirmed() {
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.component.html b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.component.html
new file mode 100644
index 000000000..5f5899759
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.component.html
@@ -0,0 +1,21 @@
+<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  ~ Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+  ~
+  ~ See the NOTICE file(s) distributed with this work for additional
+  ~ information regarding copyright ownership.
+  ~
+  ~ This program and the accompanying materials are made available under the
+  ~ terms of the Eclipse Public License 2.0 which is available at
+  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.
+  ~
+  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
+<div>
+    <ul class="nav nav-tabs">
+        <li role="presentation" routerLinkActive="active" [routerLink]="['metadata']"><a>Metadata</a></li>
+        <li role="presentation" routerLinkActive="active" [routerLink]="['publication']"><a>Publication</a></li>
+        <li role="presentation" routerLinkActive="active" [routerLink]="['files']"><a>Files</a></li>
+    </ul>
+</div>
+<router-outlet></router-outlet>
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.component.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.component.ts
new file mode 100644
index 000000000..05d227523
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.component.ts
@@ -0,0 +1,37 @@
+/*******************************************************************************
+ * Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { Component, OnInit } from '@angular/core';
+import { InstanceService } from '../../instance.service';
+import { ActivatedRoute } from '@angular/router';
+import { ResearchObjectService } from './researchObject.service';
+
+@Component({
+    selector: 'winery-research-object',
+    templateUrl: 'researchObject.component.html',
+    providers: [ResearchObjectService]
+})
+export class ResearchObjectComponent implements OnInit {
+
+    urlSegment: string;
+
+    constructor(private service: ResearchObjectService,
+                private iService: InstanceService,
+                private route: ActivatedRoute) {
+        this.route.url.subscribe(data => this.urlSegment = data[0].path);
+    }
+
+    ngOnInit() {
+        this.service.setBaseUrl(this.iService.path + '/' + this.urlSegment + '/');
+    }
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.module.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.module.ts
new file mode 100644
index 000000000..5a7790473
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.module.ts
@@ -0,0 +1,60 @@
+/*******************************************************************************
+ * Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { NgModule } from '@angular/core';
+import { HttpModule } from '@angular/http';
+import { FormsModule } from '@angular/forms';
+import { BrowserModule } from '@angular/platform-browser';
+import { RouterModule } from '@angular/router';
+import { WineryLoaderModule } from '../../../wineryLoader/wineryLoader.module';
+import { ResearchObjectPublicationComponent } from './researchObjectPublication.component';
+import { ResearchObjectMetaDataComponent } from './researchObjectMetaData.component';
+import { ResearchObjectComponent } from './researchObject.component';
+import { SelectModule } from 'ng2-select';
+import { FileUploaderModule } from '../../sharedComponents/files/fileUploader/fileUploader.module';
+import { ResearchObjectFilesComponent } from './researchObjectFiles.component';
+import { FileManagerModule } from '../../sharedComponents/files/fileManager/fileManager.module';
+import {
+    MatExpansionModule, MatFormFieldModule, MatIconModule, MatInputModule, MatProgressBarModule
+} from '@angular/material';
+import { MatButtonModule } from '@angular/material/button';
+
+
+@NgModule({
+    imports: [
+        BrowserModule,
+        FormsModule,
+        HttpModule,
+        RouterModule,
+        WineryLoaderModule,
+        SelectModule,
+        FileUploaderModule,
+        FileManagerModule,
+        MatExpansionModule,
+        MatFormFieldModule,
+        MatInputModule,
+        MatButtonModule,
+        MatProgressBarModule,
+        MatIconModule
+    ],
+    exports: [],
+    declarations: [
+        ResearchObjectComponent,
+        ResearchObjectPublicationComponent,
+        ResearchObjectMetaDataComponent,
+        ResearchObjectFilesComponent
+    ],
+    providers: [],
+})
+export class ResearchObjectModule {
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.service.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.service.ts
new file mode 100644
index 000000000..9ae2f2d67
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObject.service.ts
@@ -0,0 +1,100 @@
+/*******************************************************************************
+ * Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+
+import { Injectable } from '@angular/core';
+import { Observable } from 'rxjs';
+import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
+import { ROMetadataApiData, ROPublicationApiData } from '../../../model/researchObjectApiData';
+import { FileOrFolderElement } from '../../../model/fileOrFolderElement';
+import { FileApiData } from '../../../model/fileApiData';
+
+
+@Injectable()
+export class ResearchObjectService {
+
+    researchObjectMetadata: ROMetadataApiData;
+    researchObjectPublication: ROPublicationApiData;
+    pathToElementsMap: Map<string, FileOrFolderElement[]>;
+    baseUrl: string;
+
+    constructor(private http: HttpClient) {
+    }
+
+    getResearchObjectMetadata(): Observable<ROMetadataApiData> {
+        const o = this.http.get<ROMetadataApiData>(this.baseUrl + 'metadata');
+        o.subscribe(data => this.researchObjectMetadata = data);
+        return o;
+    }
+
+    saveResearchObjectMetadata(data: ROMetadataApiData): Observable<HttpResponse<string>> {
+        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
+        return this.http.put(this.baseUrl + 'metadata', data, {
+            headers: headers, observe: 'response', responseType: 'text'
+        });
+    }
+
+    getResearchObjectPublication(): Observable<ROPublicationApiData> {
+        const o = this.http.get<ROPublicationApiData>(this.baseUrl + 'publication');
+        o.subscribe(data => this.researchObjectPublication = data);
+        return o;
+    }
+
+    saveResearchObjectPublication(data: ROPublicationApiData): Observable<HttpResponse<string>> {
+        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
+        return this.http.put(this.baseUrl + 'publication', data, {
+            headers: headers, observe: 'response', responseType: 'text'
+        });
+    }
+
+    getDirsAndFiles(): Observable<Map<string, FileOrFolderElement[]>> {
+        const o = this.http.get<any>(this.baseUrl + 'files');
+        o.subscribe(data => this.pathToElementsMap = this.createMap(data));
+        return o;
+    }
+
+    createMap(data: any): Map<string, FileOrFolderElement[]> {
+        const map: Map<string, FileOrFolderElement[]> = new Map();
+        for (const path of Object.keys(data)) {
+            map.set(path, data[path]);
+        }
+        return map;
+    }
+
+    createDirectory(path: string): Observable<HttpResponse<string>> {
+        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
+        return this.http.post(this.baseUrl + 'files', new FileApiData(path, null), {
+            headers: headers, observe: 'response', responseType: 'text'
+        });
+    }
+
+    move(sourcePath: string, targetPath: string): Observable<HttpResponse<string>> {
+        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
+        return this.http.post(this.baseUrl + 'files', new FileApiData(sourcePath, targetPath), {
+            headers: headers, observe: 'response', responseType: 'text'
+        });
+    }
+
+    delete(path: string): Observable<HttpResponse<string>> {
+        const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
+        return this.http.request('delete', this.baseUrl + 'files', {
+            body: new FileApiData(path, null),
+            headers: headers, observe: 'response', responseType: 'text'
+        });
+    }
+
+    setBaseUrl(url: string) {
+        this.baseUrl = url;
+    }
+
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.css b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.css
new file mode 100644
index 000000000..446d313b8
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.css
@@ -0,0 +1,47 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+mat-panel-description {
+    justify-content: center !important;
+}
+
+.urlField {
+    margin-right: 25px;
+    width: 50%;
+}
+
+.downloadButton {
+    margin-left: 40px;
+    margin-right: 40px;
+}
+
+mat-icon{
+    font-size: 40px;
+    font-weight: bold;
+    vertical-align: text-bottom;
+    padding-bottom: 30px;
+    color: green;
+}
+
+.finished{
+    color: green;
+}
+
+.error{
+    color: red;
+}
+
+.warn {
+    color: red;
+    font-style: italic;
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.html b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.html
new file mode 100644
index 000000000..d1b02f46f
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.html
@@ -0,0 +1,65 @@
+<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  ~ Copyright (c) 2022 Contributors to the Eclipse Foundation
+  ~
+  ~ See the NOTICE file(s) distributed with this work for additional
+  ~ information regarding copyright ownership.
+  ~
+  ~ This program and the accompanying materials are made available under the
+  ~ terms of the Eclipse Public License 2.0 which is available at
+  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.
+  ~
+  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
+
+<div class="localLoader" [class.hidden]="!loading">
+    <winery-loader></winery-loader>
+</div>
+
+<winery-file-manager #fileManager
+                     [pathToElementsMap]="pathToElementsMap"
+                     (folderCreated)="createNewFolder($event)"
+                     (elementDeleted)="delete($event)"
+                     (elementUpdated)="move($event)"
+                     (updateRequested)="getAllDirsAndFiles()">
+</winery-file-manager>
+<br><br>
+<mat-accordion>
+    <mat-expansion-panel (opened)="panelOpenState = true"
+                         (closed)="panelOpenState = false">
+        <mat-expansion-panel-header>
+            <mat-panel-description>
+                File Uploader
+            </mat-panel-description>
+        </mat-expansion-panel-header>
+        <winery-file-uploader
+            [currentPath]="fileManager.currentPath"
+            (updateRequested)="getAllDirsAndFiles()">
+        </winery-file-uploader>
+    </mat-expansion-panel>
+    <mat-expansion-panel>
+        <mat-expansion-panel-header>
+            <mat-panel-description>
+                GitHub Downloader
+            </mat-panel-description>
+        </mat-expansion-panel-header>
+        <mat-form-field class="urlField">
+            <input #repoURL matInput placeholder="Repository URL">
+        </mat-form-field>
+        <mat-form-field>
+            <input #branch matInput placeholder="Branch (optional)">
+        </mat-form-field>
+        <button class="downloadButton" mat-raised-button color="primary"
+                [disabled]="downloaderStatus===STATUS[0] || !correctURL(repoURL.value)"
+                (click)="download(repoURL.value, branch.value, fileManager.currentPath)">
+            Download
+        </button>
+        <mat-icon class="finished" *ngIf="downloaderStatus===STATUS[1]">check</mat-icon>
+        <mat-icon class="error" *ngIf="downloaderStatus===STATUS[2]">cancel</mat-icon>
+        <mat-progress-bar mode="indeterminate" *ngIf="downloaderStatus===STATUS[0]"></mat-progress-bar>
+        <div class="warn" *ngIf="!correctURL(repoURL.value) && repoURL.value.length > 0">
+            Has to start with "https://github.com/"
+        </div>
+    </mat-expansion-panel>
+</mat-accordion>
+<br>
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.ts
new file mode 100644
index 000000000..67694d8f0
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectFiles.component.ts
@@ -0,0 +1,116 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { Component, OnInit } from '@angular/core';
+import { HttpErrorResponse } from '@angular/common/http';
+import { MatDialog } from '@angular/material/dialog';
+import { FileOrFolderElement } from '../../../model/fileOrFolderElement';
+import { WineryNotificationService } from '../../../wineryNotificationModule/wineryNotification.service';
+import { ResearchObjectService } from './researchObject.service';
+
+@Component({
+    selector: 'winery-research-object-file-handler',
+    templateUrl: 'researchObjectFiles.component.html',
+    styleUrls: ['researchObjectFiles.component.css']
+})
+
+export class ResearchObjectFilesComponent implements OnInit {
+
+    pathToElementsMap: Map<string, FileOrFolderElement[]>;
+    loading = true;
+    panelOpenState = true;
+    STATUS = ['downloading', 'success', 'error'];
+    downloaderStatus;
+
+
+    constructor(public service: ResearchObjectService, private notify: WineryNotificationService, public dialog: MatDialog) {
+    }
+
+    ngOnInit() {
+        if (this.service.pathToElementsMap) {
+            this.handleData();
+        } else {
+            this.getAllDirsAndFiles();
+        }
+    }
+
+    getAllDirsAndFiles() {
+        this.service.getDirsAndFiles().subscribe(
+            data => this.handleData(),
+            error => {
+                this.notify.error(error.toString());
+                this.loading = false;
+            });
+    }
+
+    handleData() {
+        this.pathToElementsMap = this.service.pathToElementsMap;
+        this.loading = false;
+    }
+
+    createNewFolder(folderPath: string) {
+        this.service.createDirectory(folderPath).subscribe(
+            data => this.getAllDirsAndFiles(),
+            error => {
+                this.notify.error(error.toString());
+                this.loading = false;
+            });
+    }
+
+    delete(element: string) {
+        this.service.delete(element).subscribe(
+            data => this.getAllDirsAndFiles(),
+            error => {
+                this.notify.error(error.toString());
+            }
+        );
+    }
+
+    move(element: { oldPath: string, newPath: string }) {
+        this.service.move(element.oldPath, element.newPath).subscribe(
+            data => this.getAllDirsAndFiles(),
+            error => {
+                this.notify.error(error.toString());
+            });
+    }
+
+    handleSuccess(message: string) {
+        this.notify.success(message);
+    }
+
+    handleError(error: HttpErrorResponse) {
+        this.notify.error(error.message);
+    }
+
+    download(repo: string, branch: string, targetPath: string) {
+        this.downloaderStatus = this.STATUS[0];
+        repo = repo.replace('https://github.com/', '');
+        if (repo.endsWith('/')) {
+            repo = repo.slice(0, -1);
+        }
+        repo = 'https://api.github.com/repos/' + repo + '/zipball/' + branch;
+        this.service.move(repo, targetPath).subscribe(
+            data => {
+                this.downloaderStatus = this.STATUS[1];
+                this.getAllDirsAndFiles();
+            },
+            error => {
+                this.downloaderStatus = this.STATUS[2];
+                this.notify.error(error.toString());
+            });
+    }
+
+    correctURL(url: string) {
+        return url.startsWith('https://github.com/');
+    }
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectMetaData.component.html b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectMetaData.component.html
new file mode 100644
index 000000000..be91d9176
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectMetaData.component.html
@@ -0,0 +1,51 @@
+<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  ~ Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+  ~
+  ~ See the NOTICE file(s) distributed with this work for additional
+  ~ information regarding copyright ownership.
+  ~
+  ~ This program and the accompanying materials are made available under the
+  ~ terms of the Eclipse Public License 2.0 which is available at
+  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.
+  ~
+  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
+<div class="localLoader" [class.hidden]="!loading">
+    <winery-loader></winery-loader>
+</div>
+
+<div *ngIf="!loading">
+    <br>
+    <label class="control-label" for="metaTitle">Title:</label>
+    <input class="form-control" id="metaTitle" name="title" [(ngModel)]="data.title">
+    <br>
+    <label class="control-label" for="metaAuthor">Author:</label>
+    <input class="form-control" id="metaAuthor" name="author" [(ngModel)]="data.author">
+    <br>
+    <label class="control-label" for="metaContact">Contact:</label>
+    <input class="form-control" id="metaContact" name="contact" [(ngModel)]="data.contact">
+    <br>
+    <div class="form-group">
+        <label class="label-form">Description:</label>
+        <textarea class="form-control" id="researchObjectDescriptionDiv" name="description"
+                  [(ngModel)]="data.description"></textarea>
+    </div>
+
+    <div class="control-group">
+        <label class="control-label">Subject:</label>
+        <div>
+            <ng-select [multiple]="true"
+                       [(ngModel)]="selection"
+                       [items]="items"
+                       placeholder="Select Subjects">
+            </ng-select>
+        </div>
+    </div>
+    <br>
+    <div>
+        <button class="btn btn-primary" (click)="saveResearchObjectMetadata()" name="save">
+            Save
+        </button>
+    </div>
+</div>
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectMetaData.component.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectMetaData.component.ts
new file mode 100644
index 000000000..472a3d63d
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectMetaData.component.ts
@@ -0,0 +1,87 @@
+/*******************************************************************************
+ * Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { Component, OnInit } from '@angular/core';
+import { ResearchObjectService } from './researchObject.service';
+import { WineryNotificationService } from '../../../wineryNotificationModule/wineryNotification.service';
+import { HttpErrorResponse } from '@angular/common/http';
+import { ROMetadataApiData } from '../../../model/researchObjectApiData';
+
+@Component({
+    selector: 'winery-meta-data-research-object',
+    templateUrl: 'researchObjectMetaData.component.html'
+})
+export class ResearchObjectMetaDataComponent implements OnInit {
+
+    data: ROMetadataApiData;
+    loading = true;
+    private items: Array<string> = ['Agricultural Sciences', 'Arts and Humanities', 'Astronomy and Astrophysics', 'Business and Management',
+        'Chemistry', 'Computer and Information Science', 'Earth and Environmental Sciences', 'Engineering', 'Law',
+        'Mathematical Sciences', 'Medicine', 'Health and Life Sciences', 'Physics', 'Social Sciences', 'Other'];
+    private selection: string[] = [];
+
+    constructor(private service: ResearchObjectService,
+                private notify: WineryNotificationService) {
+    }
+
+    ngOnInit() {
+        if (this.service.researchObjectMetadata) {
+            this.handleData();
+        } else {
+            this.getResearchObjectMetadata();
+        }
+    }
+
+    public itemsToList(value: Array<any> = []): Array<string> {
+        const valueList: Array<string> = [];
+        for (const entry of value) {
+            valueList.push(entry.text);
+        }
+        return valueList;
+    }
+
+    getResearchObjectMetadata() {
+        this.service.getResearchObjectMetadata().subscribe(
+            data => this.handleData(),
+            error => {
+                this.notify.error(error.toString());
+                this.loading = false;
+            });
+    }
+
+    saveResearchObjectMetadata() {
+        this.data.subjects = { subject: this.itemsToList(this.selection) };
+        this.service.saveResearchObjectMetadata(this.data).subscribe(
+            data => {
+                this.handleSuccess('Saved data');
+            },
+            error => this.handleError(error)
+        );
+    }
+
+    handleData() {
+        this.data = this.service.researchObjectMetadata;
+        if (!!this.data.subjects) {
+            this.selection = this.data.subjects.subject;
+        }
+        this.loading = false;
+    }
+
+    handleSuccess(message: string) {
+        this.notify.success(message);
+    }
+
+    handleError(error: HttpErrorResponse) {
+        this.notify.error(error.message);
+    }
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectPublication.component.html b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectPublication.component.html
new file mode 100644
index 000000000..e8c4b61d2
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectPublication.component.html
@@ -0,0 +1,42 @@
+<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  ~ Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+  ~
+  ~ See the NOTICE file(s) distributed with this work for additional
+  ~ information regarding copyright ownership.
+  ~
+  ~ This program and the accompanying materials are made available under the
+  ~ terms of the Eclipse Public License 2.0 which is available at
+  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.
+  ~
+  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
+<div class="localLoader" [class.hidden]="!loading">
+    <winery-loader></winery-loader>
+</div>
+
+<div *ngIf="!loading">
+    <br>
+    <label class="control-label" for="publicationCitation">Publication Citation:</label>
+    <input class="form-control" id="publicationCitation" name="publicationCitation" [(ngModel)]="data.citation">
+    <br>
+    <label class="control-label">Publication ID Type:</label>
+    <div>
+        <ng-select [items]="items"
+                   [(ngModel)]="idType"
+                   placeholder="Select ID Type">
+        </ng-select>
+    </div>
+    <br>
+    <label class="control-label" for="publicationID">Publication ID:</label>
+    <input class="form-control" id="publicationID" name="publicationID" [(ngModel)]="data.id">
+    <br>
+    <label class="control-label" for="publicationUrl">Publication URL:</label>
+    <input class="form-control" id="publicationUrl" name="publicationUrl" [(ngModel)]="data.url">
+    <br>
+    <div>
+        <button class="btn btn-primary" (click)="saveResearchObjectPublication()" name="save">
+            Save
+        </button>
+    </div>
+</div>
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectPublication.component.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectPublication.component.ts
new file mode 100644
index 000000000..facc42cd2
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectPublication.component.ts
@@ -0,0 +1,83 @@
+/*******************************************************************************
+ * Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { Component, OnInit } from '@angular/core';
+import { ResearchObjectService } from './researchObject.service';
+import { WineryNotificationService } from '../../../wineryNotificationModule/wineryNotification.service';
+import { HttpErrorResponse } from '@angular/common/http';
+import { ROPublicationApiData } from '../../../model/researchObjectApiData';
+
+@Component({
+    selector: 'winery-publication-research-object',
+    templateUrl: 'researchObjectPublication.component.html'
+})
+export class ResearchObjectPublicationComponent implements OnInit {
+
+    data: ROPublicationApiData;
+    loading = true;
+    public items: Array<string> = ['ark', 'arXiv', 'bibcode', 'doi', 'ean13', 'eissn', 'handle',
+        'isbn', 'issn', 'istc', 'lissn', 'lsid', 'pmid', 'purl', 'upc', 'url', 'urn'];
+    private idType: any = [];
+
+    constructor(private service: ResearchObjectService,
+                private notify: WineryNotificationService) {
+    }
+
+
+    ngOnInit() {
+        if (this.service.researchObjectPublication) {
+            this.handleData();
+            this.loading = false;
+        } else {
+            this.getResearchObjectPublication();
+        }
+    }
+
+    getResearchObjectPublication() {
+        this.service.getResearchObjectPublication().subscribe(
+            data => this.handleData(),
+            error => {
+                this.notify.error(error.toString());
+                this.loading = false;
+            });
+    }
+
+    saveResearchObjectPublication() {
+        if (!!this.idType[0]) {
+            this.data.idType = this.idType[0].text;
+        }
+        this.service.saveResearchObjectPublication(this.data).subscribe(
+            data => {
+                this.handleSuccess('Saved data');
+            },
+            error => this.handleError(error)
+        );
+    }
+
+    handleData() {
+        this.data = this.service.researchObjectPublication;
+        if (!!this.data.idType) {
+            this.idType.push(this.data.idType);
+        }
+        this.loading = false;
+    }
+
+    handleSuccess(message: string) {
+        this.notify.success(message);
+    }
+
+    handleError(error: HttpErrorResponse) {
+        this.notify.error(error.message);
+    }
+
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectRouter.module.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectRouter.module.ts
new file mode 100644
index 000000000..f2c9fd913
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/serviceTemplates/researchObject/researchObjectRouter.module.ts
@@ -0,0 +1,54 @@
+/*******************************************************************************
+ * Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { NgModule } from '@angular/core';
+import { RouterModule, Routes } from '@angular/router';
+import { BrowserModule } from '@angular/platform-browser';
+import { FormsModule } from '@angular/forms';
+import { HttpModule } from '@angular/http';
+import { ResearchObjectPublicationComponent } from './researchObjectPublication.component';
+import { ResearchObjectMetaDataComponent } from './researchObjectMetaData.component';
+import { ResearchObjectFilesComponent } from './researchObjectFiles.component';
+
+export const researchObjectRoutes: Routes = [
+    {
+        path: 'publication',
+        component: ResearchObjectPublicationComponent
+    },
+    {
+        path: 'metadata',
+        component: ResearchObjectMetaDataComponent
+    },
+    {
+        path: 'files',
+        component: ResearchObjectFilesComponent
+    },
+    {
+        path: '',
+        pathMatch: 'full',
+        redirectTo: 'metadata'
+    }
+];
+
+@NgModule({
+    imports: [
+        BrowserModule,
+        FormsModule,
+        HttpModule,
+    ],
+    exports: [RouterModule],
+    declarations: [],
+    providers: [],
+})
+export class ResearchObjectRoutingModule {
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/confirmDialog.component.html b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/confirmDialog.component.html
new file mode 100644
index 000000000..c8dd75f42
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/confirmDialog.component.html
@@ -0,0 +1,24 @@
+<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  ~ Copyright (c) 2022 Contributors to the Eclipse Foundation
+  ~
+  ~ See the NOTICE file(s) distributed with this work for additional
+  ~ information regarding copyright ownership.
+  ~
+  ~ This program and the accompanying materials are made available under the
+  ~ terms of the Eclipse Public License 2.0 which is available at
+  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.
+  ~
+  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
+<h4 mat-dialog-title>Are you sure you want</h4>
+<h4 *ngIf="!data.isFile" mat-dialog-title>to delete this folder?</h4>
+<h4 *ngIf="data.isFile" mat-dialog-title>to delete this file?</h4>
+<h3 mat-dialog-title><strong>{{data.name}}</strong></h3>
+
+
+<mat-dialog-actions>
+    <button mat-raised-button mat-dialog-close="delete" color="warn">Delete</button>
+    <span class="spacer"></span>
+    <button mat-raised-button mat-dialog-close>Cancel</button>
+</mat-dialog-actions>
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/confirmDialog.component.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/confirmDialog.component.ts
new file mode 100644
index 000000000..bd62f6cff
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/confirmDialog.component.ts
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { Component, Inject, OnInit } from '@angular/core';
+import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
+import { FileOrFolderElement } from '../../../../../model/fileOrFolderElement';
+
+@Component({
+    selector: 'winery-file-confirm-dialog',
+    templateUrl: 'confirmDialog.component.html',
+    styleUrls: ['fileManagerDialog.component.css']
+})
+export class ConfirmDialogComponent {
+
+    constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: FileOrFolderElement) {
+    }
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/fileManagerDialog.component.css b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/fileManagerDialog.component.css
new file mode 100644
index 000000000..d3eb829d2
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/fileManagerDialog.component.css
@@ -0,0 +1,31 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+.mat-dialog-title {
+    display: flex;
+    align-items: center;
+    justify-content: center;
+}
+
+.warn {
+    color: red;
+    font-style: italic;
+}
+
+.mat-dialog-actions {
+    justify-content: center;
+}
+
+.spacer {
+    flex: 5 1 auto;
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/newFolderDialog.component.html b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/newFolderDialog.component.html
new file mode 100644
index 000000000..d214d4fc5
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/newFolderDialog.component.html
@@ -0,0 +1,29 @@
+<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  ~ Copyright (c) 2022 Contributors to the Eclipse Foundation
+  ~
+  ~ See the NOTICE file(s) distributed with this work for additional
+  ~ information regarding copyright ownership.
+  ~
+  ~ This program and the accompanying materials are made available under the
+  ~ terms of the Eclipse Public License 2.0 which is available at
+  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.
+  ~
+  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
+<h1 mat-dialog-title>Create a new folder</h1>
+
+<mat-dialog-content>
+    <mat-form-field>
+        <input matInput placeholder="Enter a Name" [(ngModel)]="folderName">
+    </mat-form-field>
+    <div class="warn" *ngIf="forbiddenChar(folderName)">Use [A-Z] [a-z] [0-9] - _</div>
+</mat-dialog-content>
+
+<mat-dialog-actions>
+    <button mat-raised-button [mat-dialog-close]="folderName" color="primary" [disabled]="forbiddenChar(folderName)">
+        Create
+    </button>
+    <span class="spacer"></span>
+    <button mat-raised-button mat-dialog-close>Cancel</button>
+</mat-dialog-actions>
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/newFolderDialog.component.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/newFolderDialog.component.ts
new file mode 100644
index 000000000..b2f519880
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/newFolderDialog.component.ts
@@ -0,0 +1,33 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { Component, OnInit } from '@angular/core';
+import { MatDialogRef } from '@angular/material/dialog';
+
+@Component({
+    selector: 'winery-new-folder-dialog',
+    templateUrl: 'newFolderDialog.component.html',
+    styleUrls: ['fileManagerDialog.component.css']
+})
+export class NewFolderDialogComponent {
+
+    folderName: string;
+
+    constructor(public dialogRef: MatDialogRef<NewFolderDialogComponent>) {
+    }
+
+    forbiddenChar(name: string) {
+        const regexp = new RegExp(/[/\\?%*:|"<>]/g);
+        return regexp.test(name);
+    }
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/renameDialog.component.html b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/renameDialog.component.html
new file mode 100644
index 000000000..ed3cedcfe
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/renameDialog.component.html
@@ -0,0 +1,30 @@
+<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  ~ Copyright (c) 2022 Contributors to the Eclipse Foundation
+  ~
+  ~ See the NOTICE file(s) distributed with this work for additional
+  ~ information regarding copyright ownership.
+  ~
+  ~ This program and the accompanying materials are made available under the
+  ~ terms of the Eclipse Public License 2.0 which is available at
+  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.
+  ~
+  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
+<h1 mat-dialog-title *ngIf="data.isFile">Rename selected file:</h1>
+<h1 mat-dialog-title *ngIf="!data.isFile">Rename selected folder:</h1>
+
+<mat-dialog-content>
+    <mat-form-field>
+        <input matInput placeholder="{{data.name}}" [(ngModel)]="folderName">
+    </mat-form-field>
+    <div class="warn" *ngIf="forbiddenChar(folderName)">Use [A-Z] [a-z] [0-9] - _</div>
+</mat-dialog-content>
+
+<mat-dialog-actions>
+    <button mat-raised-button [mat-dialog-close]="folderName" color="primary" [disabled]="forbiddenChar(folderName)">
+        Save
+    </button>
+    <span class="spacer"></span>
+    <button mat-raised-button mat-dialog-close>Cancel</button>
+</mat-dialog-actions>
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/renameDialog.component.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/renameDialog.component.ts
new file mode 100644
index 000000000..a9fda8e2f
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/dialogs/renameDialog.component.ts
@@ -0,0 +1,33 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { Component, Inject, OnInit } from '@angular/core';
+import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
+
+@Component({
+    selector: 'winery-file-rename-dialog',
+    templateUrl: 'renameDialog.component.html',
+    styleUrls: ['fileManagerDialog.component.css']
+})
+export class RenameDialogComponent {
+
+    folderName: string;
+
+    constructor(public dialogRef: MatDialogRef<RenameDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {
+    }
+
+    forbiddenChar(name: string) {
+        const regexp = new RegExp(/[/\\?%*:|"<>]/g);
+        return regexp.test(name);
+    }
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.css b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.css
new file mode 100644
index 000000000..8ecaa866e
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.css
@@ -0,0 +1,86 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+
+
+.header {
+    text-align: center;
+    width: 100%;
+    display: inline-block;
+    vertical-align: middle;
+    font-size: 20px;
+    padding-top: 18px;
+}
+
+.path {
+    font-size: 20px;
+    padding-right: 15px;
+
+}
+
+table {
+    width: 100%;
+}
+
+.menuIcon {
+    font-size: 30px;
+    cursor: pointer;
+    padding-bottom: 40px
+}
+
+.mat-icon-button:disabled .menuIcon {
+    cursor: default;
+}
+
+.homeButton {
+    float: left;
+}
+
+.backButton {
+    float: left;
+    margin-left: 10px;
+}
+
+.toolbarRight {
+    float: right;
+}
+
+.newFolderButton {
+    margin-right: 10px;
+}
+
+.menuButton {
+    margin-right: -10px;
+}
+
+.mat-grid-list {
+    padding-top: 20px;
+}
+
+.iconAndText {
+    text-align: center;
+    width: 100px;
+    position: absolute;
+    top: inherit;
+}
+
+.bigIcons {
+    font-size: 55px;
+    cursor: pointer;
+    padding-right: 55px;
+}
+
+.bigIconsText {
+    display: block;
+    word-break: break-all;
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.html b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.html
new file mode 100644
index 000000000..4f4a6d7e3
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.html
@@ -0,0 +1,141 @@
+<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  ~ Copyright (c) 2022 Contributors to the Eclipse Foundation
+  ~
+  ~ See the NOTICE file(s) distributed with this work for additional
+  ~ information regarding copyright ownership.
+  ~
+  ~ This program and the accompanying materials are made available under the
+  ~ terms of the Eclipse Public License 2.0 which is available at
+  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.
+  ~
+  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
+<link
+    href="https://fonts.googleapis.com/icon?family=Material+Icons"
+    rel="stylesheet"
+/>
+
+<mat-toolbar class="header">
+    <button mat-icon-button [disabled]="this.currentPath==this.baseDir" class="homeButton">
+        <mat-icon class="menuIcon" (click)="goRoot()">home</mat-icon>
+    </button>
+    <button mat-icon-button [disabled]="this.currentPath==this.baseDir" class="backButton">
+        <mat-icon class="menuIcon" (click)="navigateBack()">arrow_back</mat-icon>
+    </button>
+    <span class="path">{{currentPath || '\\'}}</span>
+    <span class="toolbarRight">
+    <button mat-icon-button class="newFolderButton">
+        <mat-icon class="menuIcon" (click)="createNewFolder()">create_new_folder</mat-icon>
+    </button>
+    <button mat-icon-button class="menuButton" [matMenuTriggerFor]="toolbarMenu">
+        <mat-icon class="menuIcon">more_vert</mat-icon>
+    </button>
+        </span>
+</mat-toolbar>
+
+
+<div *ngIf="listView">
+    <table mat-table [dataSource]="dirsAndFilesList" (matSortChange)="sortData($event, true)" matSort
+           class="mat-elevation-z0">
+
+        <ng-container matColumnDef="isFile">
+            <th mat-header-cell *matHeaderCellDef mat-sort-header></th>
+            <td mat-cell *matCellDef="let item">
+                <mat-icon *ngIf="item.isFile">insert_drive_file</mat-icon>
+                <mat-icon *ngIf="!item.isFile" (click)="openFolder(item)">folder</mat-icon>
+            </td>
+        </ng-container>
+
+        <ng-container matColumnDef="name">
+            <th mat-header-cell *matHeaderCellDef mat-sort-header> Name</th>
+            <ng-container *matCellDef="let item">
+                <td mat-cell class="pointer" (contextmenu)="onContextMenu($event, item)"
+                    (click)="openFolder(item)"> {{item.name}} </td>
+            </ng-container>
+        </ng-container>
+
+        <ng-container matColumnDef="size">
+            <th mat-header-cell *matHeaderCellDef mat-sort-header> Size</th>
+            <td mat-cell *matCellDef="let item">
+                <ng-container>{{getSize(item)}}</ng-container>
+            </td>
+        </ng-container>
+
+        <ng-container matColumnDef="modified">
+            <th mat-header-cell *matHeaderCellDef mat-sort-header> Last modified</th>
+            <td mat-cell *matCellDef="let item"> {{item.modified}} </td>
+        </ng-container>
+
+        <tr mat-header-row *matHeaderRowDef="COLUMNS"></tr>
+        <tr mat-row *matRowDef="let row; columns: COLUMNS;"></tr>
+    </table>
+</div>
+
+<div *ngIf="!listView">
+    <mat-grid-list cols="7" rowHeight="1:1">
+        <mat-grid-tile *ngFor="let item of dirsAndFilesList" class="iconAndTextTile">
+            <div (click)="openFolder(item)" class="iconAndText"
+                 (contextmenu)="onContextMenu($event, item)">
+                <mat-icon class="bigIcons" *ngIf="!item.isFile" matTooltipShowDelay=750 matTooltipPosition="above"
+                          matTooltip="{{item.modified}}">folder
+                </mat-icon>
+                <mat-icon class="bigIcons" *ngIf="item.isFile" matTooltipShowDelay=750 matTooltipPosition="above"
+                          matTooltip="{{getSize(item)}} | {{item.modified}}">insert_drive_file
+                </mat-icon>
+                <span class="bigIconsText">{{item.name}}</span>
+            </div>
+        </mat-grid-tile>
+    </mat-grid-list>
+</div>
+
+
+<div #contextMenuTrigger="matMenuTrigger"
+     style="visibility: hidden; position: fixed"
+     [style.left]="contextMenuPosition.x"
+     [style.top]="contextMenuPosition.y"
+     [matMenuTriggerFor]="contextMenu">
+</div>
+<mat-menu #contextMenu="matMenu">
+    <ng-template matMenuContent let-item="item">
+        <button mat-menu-item (click)="openRenameDialog(item)">
+            <mat-icon>edit</mat-icon>
+            <span><strong>Rename:</strong> {{item.name}}</span></button>
+        <mat-divider></mat-divider>
+        <button mat-menu-item (click)="delete(item)">
+            <mat-icon>delete</mat-icon>
+            <span><strong>Delete:</strong> {{item.name}}</span></button>
+        <mat-divider></mat-divider>
+        <button mat-menu-item [matMenuTriggerFor]="moveMenu" [matMenuTriggerData]="{self: item}">
+            <mat-icon>open_with</mat-icon>
+            <span><strong>Move To:</strong></span>
+        </button>
+    </ng-template>
+</mat-menu>
+
+<mat-menu #moveMenu="matMenu">
+    <ng-template matMenuContent let-self="self">
+        <ng-container *ngFor="let item of getFolders(self); let first = first; let last = last">
+            <button mat-menu-item (click)="move(self, item)">{{item || '\\'}}</button>
+            <mat-divider [inset]="false" *ngIf="!last"></mat-divider>
+        </ng-container>
+    </ng-template>
+</mat-menu>
+
+<mat-menu #toolbarMenu="matMenu">
+    <ng-template matMenuContent>
+        <button mat-menu-item (click)="getAllDirsAndFiles()">
+            <mat-icon>refresh</mat-icon>
+            <span><strong>Refresh</strong></span>
+        </button>
+        <mat-divider></mat-divider>
+        <button mat-menu-item (click)="listView=!listView" *ngIf="listView">
+            <mat-icon>view_comfy</mat-icon>
+            <span><strong>Grid View</strong></span>
+        </button>
+        <button mat-menu-item (click)="listView=!listView" *ngIf="!listView">
+            <mat-icon>storage</mat-icon>
+            <span><strong>List View</strong></span>
+        </button>
+    </ng-template>
+</mat-menu>
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.ts
new file mode 100644
index 000000000..96a46a6d9
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.component.ts
@@ -0,0 +1,243 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { Component, Input, OnChanges, Output, SimpleChanges, ViewChild, EventEmitter } from '@angular/core';
+import { FileOrFolderElement } from '../../../../model/fileOrFolderElement';
+import { MatTable, Sort } from '@angular/material';
+import { RenameDialogComponent } from './dialogs/renameDialog.component';
+import { NewFolderDialogComponent } from './dialogs/newFolderDialog.component';
+import { MatDialog } from '@angular/material/dialog';
+import { MatMenuTrigger } from '@angular/material';
+import { ConfirmDialogComponent } from './dialogs/confirmDialog.component';
+
+@Component({
+    selector: 'winery-file-manager',
+    templateUrl: 'fileManager.component.html',
+    styleUrls: ['fileManager.component.css']
+})
+
+export class FileManagerComponent implements OnChanges {
+
+    @Input() pathToElementsMap: Map<string, FileOrFolderElement[]>;
+
+    @Output() currentPathChange = new EventEmitter<string>();
+    @Output() folderCreated = new EventEmitter<string>();
+    @Output() elementDeleted = new EventEmitter<string>();
+    @Output() elementUpdated = new EventEmitter<{ oldPath: string, newPath: string }>();
+    @Output() updateRequested = new EventEmitter();
+
+    @ViewChild(MatTable) table: MatTable<any>;
+    @ViewChild('contextMenuTrigger') contextMenu: MatMenuTrigger;
+
+    currentPath: string;
+    baseDir: string;
+    listView = true;
+    contextMenuPosition = { x: '0px', y: '0px' };
+
+    private dirsAndFilesList: FileOrFolderElement[];
+    private lastSort: Sort = { active: 'size', direction: 'asc' };
+
+    private readonly SEPARATOR = '\\';
+    private readonly COLUMNS: string[] = ['isFile', 'name', 'size', 'modified'];
+    private readonly UNITS = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
+
+    constructor(public dialog: MatDialog) {
+    }
+
+    ngOnChanges(changes: SimpleChanges): void {
+        if (this.pathToElementsMap) {
+            if (this.baseDir === undefined) {
+                this.determineBaseDir();
+                this.setCurrentPath(this.baseDir);
+            }
+            this.updateDirsAndFilesList();
+        }
+    }
+
+    determineBaseDir() {
+        const keys = Array.from(this.pathToElementsMap.keys());
+        keys.sort((a, b) => a.length > b.length ? 1 : -1);
+        this.baseDir = keys[0];
+    }
+
+    setCurrentPath(newPath: string) {
+        this.currentPath = newPath;
+        this.currentPathChange.emit(newPath);
+        this.updateDirsAndFilesList();
+    }
+
+    getAllDirsAndFiles() {
+        this.updateRequested.emit();
+    }
+
+    updateDirsAndFilesList() {
+        this.dirsAndFilesList = this.pathToElementsMap.get(this.currentPath);
+        if (!this.dirsAndFilesList) {
+            this.dirsAndFilesList = <FileOrFolderElement[]>[];
+        }
+        this.sortData(this.lastSort, false);
+    }
+
+    createNewFolder() {
+        const dialog = this.dialog.open(NewFolderDialogComponent);
+        dialog.afterClosed().subscribe(name => {
+            if (name) {
+                const newDir = this.getPathOfElement(name);
+                this.folderCreated.emit(newDir);
+            }
+        });
+    }
+
+    openRenameDialog(element: FileOrFolderElement) {
+        const oldPath = this.getPathOfElement(element.name);
+        const dialog = this.dialog.open(RenameDialogComponent, {
+            data: {
+                isFile: element.isFile,
+                name: element.name,
+            }
+        });
+        dialog.afterClosed().subscribe(name => {
+            if (name) {
+                const newPath = this.getPathOfElement(name);
+                this.elementUpdated.emit({ oldPath, newPath });
+            }
+        });
+    }
+
+    delete(element: FileOrFolderElement) {
+        const dialog = this.dialog.open(ConfirmDialogComponent, {
+            data: {
+                isFile: element.isFile,
+                name: element.name,
+            },
+            autoFocus: false
+        });
+        dialog.afterClosed().subscribe(res => {
+            if (res === 'delete') {
+                const toDelete = this.getPathOfElement(element.name);
+                this.elementDeleted.emit(toDelete);
+            }
+        });
+    }
+
+    move(source: FileOrFolderElement, target: string) {
+        const oldPath = this.getPathOfElement(source.name);
+        const newPath = target + this.SEPARATOR + source.name;
+        this.elementUpdated.emit({ oldPath, newPath });
+    }
+
+    getFolders(source: FileOrFolderElement) {
+        const ownPath = this.getPathOfElement(source.name);
+        const folder = [];
+        let entryPath;
+        this.pathToElementsMap.forEach((value: FileOrFolderElement[], key: string) => {
+            if (folder.indexOf(key) === -1 && key !== ownPath && key !== this.currentPath) {
+                folder.push(key);
+            }
+            for (const entry of value) {
+                entryPath = key + this.SEPARATOR + entry.name;
+                if (!entry.isFile && folder.indexOf(entryPath) === -1 && entryPath !== ownPath && entryPath !== this.currentPath) {
+                    folder.push(entryPath);
+                }
+            }
+        });
+        return folder.sort((a, b) => (this.depth(a) > this.depth(b) ? 1 : this.depth(a) === this.depth(b) ? (a.toUpperCase() > b.toUpperCase() ? 1 : -1) : -1));
+    }
+
+    depth(path: string): number {
+        return (path.match(/\\/g) || []).length;
+    }
+
+    openFolder(folder: FileOrFolderElement) {
+        if (!folder.isFile) {
+            this.setCurrentPath(this.getPathOfElement(folder.name));
+        }
+    }
+
+    navigateBack() {
+        this.setCurrentPath(this.currentPath.slice(0, this.currentPath.lastIndexOf(this.SEPARATOR)));
+    }
+
+    goRoot() {
+        this.setCurrentPath(this.baseDir);
+    }
+
+    getSize(item: FileOrFolderElement) {
+        if (item.size === 0) {
+            return '-';
+        }
+        let i = 0;
+        let size = item.size;
+        while (size >= 1024 && ++i) {
+            size = size / 1024;
+        }
+        return (size.toFixed(size < 10 && i > 0 ? 1 : 0) + ' ' + this.UNITS[i]);
+    }
+
+    onContextMenu(event: MouseEvent, item: FileOrFolderElement) {
+        event.preventDefault();
+        this.contextMenuPosition.x = event.clientX + 'px';
+        this.contextMenuPosition.y = event.clientY + 'px';
+        this.contextMenu.menuData = { 'item': item };
+        this.contextMenu.menu.focusFirstItem('mouse');
+        this.contextMenu.openMenu();
+    }
+
+    sortData($event: Sort, updateRequired: boolean) {
+        if ($event.direction === '' || $event.active === 'isFile') {
+            this.sortSize($event.direction.toString());
+        } else if ($event.active === 'name') {
+            this.sortName($event.direction.toString());
+        } else if ($event.active === 'size') {
+            this.sortSize($event.direction.toString());
+        } else if ($event.active === 'modified') {
+            this.sortModified($event.direction.toString());
+        }
+        this.lastSort = $event;
+        if (updateRequired) {
+            this.table.renderRows();
+        }
+    }
+
+    sortName(sort: string) {
+        if (sort === 'desc') {
+            this.dirsAndFilesList.sort((a, b) => (a.name.toUpperCase() < b.name.toUpperCase() ? 1 : -1));
+        } else {
+            this.dirsAndFilesList.sort((a, b) => (a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1));
+        }
+    }
+
+    sortSize(sort: string) {
+        if (sort === 'desc') {
+            this.dirsAndFilesList.sort((a, b) => (a.size < b.size ? 1 : a.size > b.size ? -1 : (a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1)));
+        } else {
+            this.dirsAndFilesList.sort((a, b) => (a.size > b.size ? 1 : a.size < b.size ? -1 : (a.name.toUpperCase() < b.name.toUpperCase() ? 1 : -1)));
+        }
+    }
+
+    sortModified(sort: string) {
+        if (sort === 'desc') {
+            this.dirsAndFilesList.sort((a, b) => (Date.parse(b.modified) - Date.parse(a.modified)));
+        } else {
+            this.dirsAndFilesList.sort((a, b) => (Date.parse(a.modified) - Date.parse(b.modified)));
+        }
+    }
+
+    getPathOfElement(element: string): string {
+        if (this.currentPath === undefined) {
+            return element;
+        }
+        return this.currentPath + this.SEPARATOR + element;
+    }
+
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.module.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.module.ts
new file mode 100644
index 000000000..6cfcc41c3
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileManager/fileManager.module.ts
@@ -0,0 +1,68 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+
+import { NgModule } from '@angular/core';
+import { CommonModule } from '@angular/common';
+import { FormsModule } from '@angular/forms';
+import { MatIconModule } from '@angular/material/icon';
+import { MatGridListModule } from '@angular/material/grid-list';
+import { MatMenuModule } from '@angular/material/menu';
+import { MatDialogModule } from '@angular/material/dialog';
+import { MatInputModule } from '@angular/material/input';
+import { MatButtonModule } from '@angular/material/button';
+import { MatToolbarModule } from '@angular/material/toolbar';
+import { NewFolderDialogComponent } from './dialogs/newFolderDialog.component';
+import { RenameDialogComponent } from './dialogs/renameDialog.component';
+import { FileManagerComponent } from './fileManager.component';
+import { ConfirmDialogComponent } from './dialogs/confirmDialog.component';
+import {
+    MatFormFieldModule, MatSortModule, MatTableModule, MatDividerModule, MatTooltipModule
+} from '@angular/material';
+
+
+@NgModule({
+    imports: [
+        CommonModule,
+        FormsModule,
+        MatToolbarModule,
+        MatIconModule,
+        MatGridListModule,
+        MatMenuModule,
+        MatDialogModule,
+        MatInputModule,
+        MatButtonModule,
+        MatTableModule,
+        MatIconModule,
+        MatSortModule,
+        MatFormFieldModule,
+        MatDividerModule,
+        MatTooltipModule
+    ],
+    declarations: [
+        FileManagerComponent,
+        NewFolderDialogComponent,
+        RenameDialogComponent,
+        ConfirmDialogComponent
+    ],
+    exports: [
+        FileManagerComponent
+    ],
+    entryComponents: [
+        NewFolderDialogComponent,
+        RenameDialogComponent,
+        ConfirmDialogComponent
+    ]
+})
+export class FileManagerModule {
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.css b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.css
new file mode 100644
index 000000000..a355b67a9
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.css
@@ -0,0 +1,23 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+
+.drop-zone {
+    border: dotted 4px lightgray;
+    width: 100%;
+    text-align: center;
+}
+
+.drop-zone-over {
+    border: dotted 5px green;
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.html b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.html
new file mode 100644
index 000000000..1bdffa24e
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.html
@@ -0,0 +1,95 @@
+<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  ~ Copyright (c) 2022 Contributors to the Eclipse Foundation
+  ~
+  ~ See the NOTICE file(s) distributed with this work for additional
+  ~ information regarding copyright ownership.
+  ~
+  ~ This program and the accompanying materials are made available under the
+  ~ terms of the Eclipse Public License 2.0 which is available at
+  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.
+  ~
+  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
+
+<label ng2FileDrop
+       [ngClass]="{'drop-zone-over': hasDropZoneOver}"
+       (fileOver)="fileOverBase($event)"
+       [uploader]="uploader"
+       class="well drop-zone">
+    Drag and drop your files here <br> or <br> Click here to open the file explorer
+    <input type="file" ng2FileSelect [uploader]="uploader" multiple style="display: none"/>
+</label>
+
+<div style="text-align: center">
+    <button type="button" class="btn btn-upload btn-s"
+            (click)="uploadThemAll()" [disabled]="!uploader.getNotUploadedItems().length">
+        <span class="glyphicon glyphicon-upload"></span> Upload all
+    </button>
+    <button type="button" class="btn btn-cancel btn-s" style="margin-left:30px;margin-right:30px"
+            (click)="uploader.cancelAll()" [disabled]="!uploader.isUploading">
+        <span class="glyphicon glyphicon-ban-circle"></span> Cancel all
+    </button>
+    <button type="button" class="btn btn-remove btn-s"
+            (click)="uploader.clearQueue()" [disabled]="!uploader.queue.length">
+        <span class="glyphicon glyphicon-trash"></span> Clear queue
+    </button>
+</div>
+<br>
+<div>
+    <span style="margin-left:10px"> {{ uploader?.queue?.length }} files in queue.</span>
+    <span style="float: right;margin-right:10px"> 
+        Upload progress:
+        {{ math.floor(uploader.progress / 100 * uploader?.queue?.length) || '0'}}/{{ uploader?.queue?.length }} 
+    </span>
+    <div class="progress" style="">
+        <div class="progress-bar" role="progressbar" [ngStyle]="{ 'width': uploader.progress + '%' }"></div>
+    </div>
+</div>
+
+<table class="table">
+    <thead>
+    <tr>
+        <th width="50%">Name</th>
+        <th>Path</th>
+        <th>Size</th>
+        <th>Progress</th>
+        <th>Status</th>
+        <th>Actions</th>
+    </tr>
+    </thead>
+    <tbody>
+    <tr *ngFor="let item of uploader.queue">
+        <td><strong>{{item?.file?.name}}</strong></td>
+        <td *ngIf="item.isUploading || item.isUploaded; else current">{{item.formData.path || '\\'}}</td>
+        <ng-template #current>
+            <td>{{currentPath || '\\'}}</td>
+        </ng-template>
+        <td *ngIf="uploader.options.isHTML5" nowrap>{{ item?.file?.size / 1024 / 1024 | number:'.2' }} MB</td>
+        <td *ngIf="uploader.options.isHTML5">
+            <div class="progress" style="margin-bottom: 0;">
+                <div class="progress-bar" role="progressbar" [ngStyle]="{ 'width': item.progress + '%' }"></div>
+            </div>
+        </td>
+        <td class="text-center">
+            <span *ngIf="item.isSuccess"><i class="glyphicon glyphicon-ok"></i></span>
+            <span *ngIf="item.isCancel"><i class="glyphicon glyphicon-ban-circle"></i></span>
+            <span *ngIf="item.isError"><i class="glyphicon glyphicon-remove"></i></span>
+        </td>
+        <td nowrap>
+            <button type="button" class="btn btn-upload btn-xs"
+                    (click)="uploadSingle(item)" [disabled]="item.isReady || item.isUploading || item.isSuccess">
+                <span class="glyphicon glyphicon-upload"></span> Upload
+            </button>
+            <button type="button" class="btn btn-cancel btn-xs"
+                    (click)="item.cancel()" [disabled]="!item.isUploading">
+                <span class="glyphicon glyphicon-ban-circle"></span> Cancel
+            </button>
+            <button type="button" class="btn btn-remove btn-xs"
+                    (click)="item.remove()">
+                <span class="glyphicon glyphicon-trash"></span> Remove
+            </button>
+        </td>
+    </tr>
+    </tbody>
+</table>
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.ts
new file mode 100644
index 000000000..891b7edf4
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.component.ts
@@ -0,0 +1,77 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
+import { FileItem, FileUploader } from 'ng2-file-upload';
+import { Router } from '@angular/router';
+import { InstanceService } from '../../../instance.service';
+
+@Component({
+    selector: 'winery-file-uploader',
+    templateUrl: 'fileUploader.component.html',
+    styleUrls: ['fileUploader.component.css']
+})
+export class FileUploaderComponent implements OnInit {
+
+    @Input() currentPath: string;
+    @Output() updateRequested = new EventEmitter();
+
+    uploader: FileUploader;
+    hasDropZoneOver: boolean;
+    url: string;
+    math = Math;
+
+    constructor(private iService: InstanceService, private router: Router) {
+        this.hasDropZoneOver = false;
+        this.url = this.iService.path + this.router.url.replace(this.iService.toscaComponent.path, '');
+    }
+
+    ngOnInit() {
+        this.uploader = new FileUploader({
+            url: this.url,
+            method: 'PUT'
+        });
+        this.uploader.onAfterAddingFile = (file) => {
+            file.withCredentials = false;
+        };
+        this.uploader.onBuildItemForm = (fileItem, form) => {
+            form.append('path', fileItem.formData.path);
+            return { fileItem, form };
+        };
+        this.uploader.onSuccessItem = (item, response, status, headers) => this.updateRequested.emit();
+    }
+
+    public fileOverBase(e: any): void {
+        this.hasDropZoneOver = e;
+    }
+
+    public uploadSingle(fileItem: FileItem) {
+        this.setPath(fileItem);
+        this.uploader.uploadItem(fileItem);
+    }
+
+    public uploadThemAll() {
+        this.uploader.queue.forEach((item) => {
+            if (!(item.isUploaded || item.isUploading)) {
+                this.setPath(item);
+            }
+        });
+        this.uploader.uploadAll();
+    }
+
+    public setPath(fileItem: FileItem) {
+        fileItem.formData = {
+            path: this.currentPath
+        };
+    }
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.module.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.module.ts
new file mode 100644
index 000000000..d997b4f42
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/instance/sharedComponents/files/fileUploader/fileUploader.module.ts
@@ -0,0 +1,37 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+import { CommonModule } from '@angular/common';
+import { NgModule } from '@angular/core';
+import { FormsModule } from '@angular/forms';
+import { BrowserModule } from '@angular/platform-browser';
+import { TabsModule } from 'ngx-bootstrap/tabs';
+import { FileUploadModule } from 'ng2-file-upload';
+import { FileUploaderComponent } from './fileUploader.component';
+
+@NgModule({
+    imports: [
+        BrowserModule,
+        CommonModule,
+        FileUploadModule,
+        TabsModule.forRoot(),
+        FormsModule
+    ],
+    declarations: [
+        FileUploaderComponent
+    ], exports: [
+        FileUploaderComponent
+    ]
+})
+export class FileUploaderModule {
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/model/fileApiData.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/model/fileApiData.ts
new file mode 100644
index 000000000..d96301f00
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/model/fileApiData.ts
@@ -0,0 +1,22 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+export class FileApiData {
+    path: string;
+    moveToPath: string;
+
+    constructor(path: string, moveToPath: string) {
+        this.path = path;
+        this.moveToPath = moveToPath;
+    }
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/model/fileOrFolderElement.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/model/fileOrFolderElement.ts
new file mode 100644
index 000000000..c17007b36
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/model/fileOrFolderElement.ts
@@ -0,0 +1,19 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+export interface FileOrFolderElement {
+    isFile: boolean;
+    name: string;
+    size: number;
+    modified: string;
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/model/researchObjectApiData.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/model/researchObjectApiData.ts
new file mode 100644
index 000000000..4f09699e9
--- /dev/null
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/model/researchObjectApiData.ts
@@ -0,0 +1,28 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+
+export interface ROMetadataApiData {
+    title: string;
+    author: string;
+    contact: string;
+    description: string;
+    subjects: { subject: Array<string> };
+}
+
+export interface ROPublicationApiData {
+    citation: string;
+    idType: string;
+    id: string;
+    url: string;
+}
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/model/subMenuItem.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/model/subMenuItem.ts
index a51f9803c..932632be8 100644
--- a/org.eclipse.winery.frontends/app/tosca-management/src/app/model/subMenuItem.ts
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/model/subMenuItem.ts
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2019-2021 Contributors to the Eclipse Foundation
+ * Copyright (c) 2019-2022 Contributors to the Eclipse Foundation
  *
  * See the NOTICE file(s) distributed with this work for additional
  * information regarding copyright ownership.
@@ -67,6 +67,7 @@ export class SubMenuItems {
     static readonly requiredStructure: SubMenuItem = { displayName: 'Required Structure', urlFragment: 'requiredstructure' };
     static readonly requirementDefinitions: SubMenuItem = { displayName: 'Requirement Definitions', urlFragment: 'requirementdefinitions' };
     static readonly requirementDefinitionsYaml: SubMenuItem = { displayName: 'Requirement Definitions', urlFragment: 'requirementdefinitionsyaml' };
+    static readonly researchObject: SubMenuItem = {displayName: 'Research Object', urlFragment: 'researchobject'};
     static readonly selfServicePortal: SubMenuItem = { displayName: 'Self-Service Portal', urlFragment: 'selfserviceportal' };
     static readonly source: SubMenuItem = { displayName: 'Source', urlFragment: 'source' };
     static readonly sourceInterfaces: SubMenuItem = { displayName: 'Source Interfaces', urlFragment: 'sourceinterfaces' };
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryFeatureToggleModule/WineryRepositoryConfiguration.service.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryFeatureToggleModule/WineryRepositoryConfiguration.service.ts
index ae69e4d7a..1bf515ec7 100644
--- a/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryFeatureToggleModule/WineryRepositoryConfiguration.service.ts
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryFeatureToggleModule/WineryRepositoryConfiguration.service.ts
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2019-2021 Contributors to the Eclipse Foundation
+ * Copyright (c) 2019-2022 Contributors to the Eclipse Foundation
  *
  * See the NOTICE file(s) distributed with this work for additional
  * information regarding copyright ownership.
@@ -28,6 +28,7 @@ export interface WineryConfiguration {
         patternRefinement: boolean;
         problemDetection: boolean;
         radon: boolean;
+        researchObject: boolean;
         splitting: boolean;
         multiParticipant: boolean;
         testRefinement: boolean;
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryFeatureToggleModule/wineryRepository.feature.direct.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryFeatureToggleModule/wineryRepository.feature.direct.ts
index cc1756001..3f1eb8770 100644
--- a/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryFeatureToggleModule/wineryRepository.feature.direct.ts
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryFeatureToggleModule/wineryRepository.feature.direct.ts
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2019-2020 Contributors to the Eclipse Foundation
+ * Copyright (c) 2019-2022 Contributors to the Eclipse Foundation
  *
  * See the NOTICE file(s) distributed with this work for additional
  * information regarding copyright ownership.
@@ -18,7 +18,7 @@ export enum FeatureEnum {
     Accountability = 'accountability', Completion = 'completion', Compliance = 'compliance', EdmmModeling = 'edmmModeling',
     FreezeAndDefrost = 'freezeAndDefrost', ManagementFeatureEnrichment = 'managementFeatureEnrichment', NFV = 'nfv',
     InstanceModelRefinement = 'instanceModelRefinement', PatternRefinement = 'patternRefinement',
-    ProblemDetection = 'problemDetection', Radon = 'radon', Splitting = 'splitting', MultiParticipant = 'multiParticipant',
+    ProblemDetection = 'problemDetection', Radon = 'radon', ResearchObject = 'researchObject', Splitting = 'splitting', MultiParticipant = 'multiParticipant',
     TestRefinement = 'testRefinement', TopologyFragmentRefinementModel = 'topologyFragmentRefinementModel',
     Placement = 'placement', updateTemplates = 'updateTemplates', Yaml = 'yaml',
     PatternDetection = 'patternDetection', LiveModeling = 'liveModeling', PropertyCheck = 'propertyCheck'
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryMainModules/serviceTemplates/serviceTemplate.module.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryMainModules/serviceTemplates/serviceTemplate.module.ts
index a4d083774..60ba89f65 100644
--- a/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryMainModules/serviceTemplates/serviceTemplate.module.ts
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryMainModules/serviceTemplates/serviceTemplate.module.ts
@@ -38,6 +38,7 @@ import { ThreatAssessmentComponent } from '../../instance/serviceTemplates/threa
 import { InputOutputParametersComponent } from '../../instance/serviceTemplates/inputOutputParameters/inputOutputParameters.component';
 import { WineryDuplicateValidatorModule } from '../../wineryValidators/wineryDuplicateValidator.module';
 import { ParametersModule } from '../../instance/sharedComponents/parameters/parameters.module';
+import { ResearchObjectModule } from '../../instance/serviceTemplates/researchObject/researchObject.module';
 
 @NgModule({
     imports: [
@@ -62,6 +63,7 @@ import { ParametersModule } from '../../instance/sharedComponents/parameters/par
         WineryLicenseModule,
         WineryDuplicateValidatorModule,
         ParametersModule,
+        ResearchObjectModule,
     ],
     declarations: [
         PlansComponent,
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryMainModules/serviceTemplates/serviceTemplateRouter.module.ts b/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryMainModules/serviceTemplates/serviceTemplateRouter.module.ts
index e34f1c7aa..8e89ac1bd 100644
--- a/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryMainModules/serviceTemplates/serviceTemplateRouter.module.ts
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/app/wineryMainModules/serviceTemplates/serviceTemplateRouter.module.ts
@@ -1,5 +1,5 @@
 /********************************************************************************
- * Copyright (c) 2017-2020 Contributors to the Eclipse Foundation
+ * Copyright (c) 2017-2021 Contributors to the Eclipse Foundation
  *
  * See the NOTICE file(s) distributed with this work for additional
  * information regarding copyright ownership.
@@ -32,6 +32,8 @@ import { WineryLicenseComponent } from '../../wineryLicenseModule/wineryLicense.
 import { ConstraintCheckingComponent } from '../../instance/serviceTemplates/constraintChecking/constraintChecking.component';
 import { ThreatAssessmentComponent } from '../../instance/serviceTemplates/threatAssessment/threatAssessment.component';
 import { InputOutputParametersComponent } from '../../instance/serviceTemplates/inputOutputParameters/inputOutputParameters.component';
+import { ResearchObjectComponent } from '../../instance/serviceTemplates/researchObject/researchObject.component';
+import { researchObjectRoutes } from '../../instance/serviceTemplates/researchObject/researchObjectRouter.module';
 
 const toscaType = ToscaTypes.ServiceTemplate;
 
@@ -65,6 +67,11 @@ const serviceTemplateRoutes: Routes = [
             { path: 'constraintchecking', component: ConstraintCheckingComponent },
             { path: 'tags', component: TagComponent },
             { path: 'documentation', component: DocumentationComponent },
+            {
+                path: 'researchobject',
+                component: ResearchObjectComponent,
+                children: researchObjectRoutes
+            },
             { path: 'xml', component: EditXMLComponent },
             { path: 'threatmodeling', component: ThreatAssessmentComponent },
             { path: '', redirectTo: 'readme', pathMatch: 'full' }
diff --git a/org.eclipse.winery.frontends/app/tosca-management/src/css/wineryRepository.css b/org.eclipse.winery.frontends/app/tosca-management/src/css/wineryRepository.css
index 52dc543e1..58ec93208 100644
--- a/org.eclipse.winery.frontends/app/tosca-management/src/css/wineryRepository.css
+++ b/org.eclipse.winery.frontends/app/tosca-management/src/css/wineryRepository.css
@@ -14,6 +14,8 @@
 
 /* override jquery redmond theme */
 
+@import '~@angular/material/prebuilt-themes/indigo-pink.css';
+
 #cap-or-reqdef-table tr td:nth-of-type(2) { /* Select the 2nd td */
     cursor: pointer;
 }
diff --git a/org.eclipse.winery.frontends/package-lock.json b/org.eclipse.winery.frontends/package-lock.json
index e62952321..f4fde4af4 100644
--- a/org.eclipse.winery.frontends/package-lock.json
+++ b/org.eclipse.winery.frontends/package-lock.json
@@ -12,17 +12,20 @@
                 "@angular-redux/store": "9.0.0",
                 "@angular-slider/ngx-slider": "2.0.3",
                 "@angular/animations": "7.2.7",
+                "@angular/cdk": "7.3.7",
                 "@angular/common": "7.2.7",
                 "@angular/compiler": "7.2.7",
                 "@angular/core": "7.2.7",
+                "@angular/flex-layout": "7.0.0-beta.24",
                 "@angular/forms": "7.2.7",
                 "@angular/http": "7.2.7",
+                "@angular/material": "7.3.7",
                 "@angular/platform-browser": "7.2.7",
                 "@angular/platform-browser-dynamic": "7.2.7",
                 "@angular/router": "7.2.7",
                 "angular-in-memory-web-api": "0.6.1",
-                "angular-resizable-element": "^3.2.6",
-                "angular-resize-event": "^1.1.1",
+                "angular-resizable-element": "3.3.5",
+                "angular-resize-event": "1.2.2",
                 "angular2-hotkeys": "2.1.3",
                 "angular2-markdown": "1.6.0",
                 "angular2-uuid": "1.1.1",
@@ -32,7 +35,7 @@
                 "css-element-queries": "0.4.0",
                 "elkjs": "0.4.1",
                 "font-awesome": "4.7.0",
-                "is-promise": "^4.0.0",
+                "is-promise": "4.0.0",
                 "jsplumb": "2.8.0",
                 "lodash": "4.17.15",
                 "ng-diff-match-patch": "3.0.1",
@@ -217,6 +220,7 @@
             "resolved": "https://registry.npmjs.org/node-sass/-/node-sass-4.13.1.tgz",
             "integrity": "sha512-TTWFx+ZhyDx1Biiez2nB0L3YrCZ/8oHagaDalbuBSlqXgUPsdkUSzJsVxeDO9LtPB49+Fh3WQl3slABo6AotNw==",
             "dev": true,
+            "hasInstallScript": true,
             "optional": true,
             "dependencies": {
                 "async-foreach": "^0.1.3",
@@ -765,6 +769,27 @@
                 "tslib": "^1.9.0"
             }
         },
+        "node_modules/@angular/cdk": {
+            "version": "7.3.7",
+            "resolved": "https://registry.npmjs.org/@angular/cdk/-/cdk-7.3.7.tgz",
+            "integrity": "sha512-xbXxhHHKGkVuW6K7pzPmvpJXIwpl0ykBnvA2g+/7Sgy5Pd35wCC+UtHD9RYczDM/mkygNxMQtagyCErwFnDtQA==",
+            "dependencies": {
+                "tslib": "^1.7.1"
+            },
+            "optionalDependencies": {
+                "parse5": "^5.0.0"
+            },
+            "peerDependencies": {
+                "@angular/common": ">=7.0.0",
+                "@angular/core": ">=7.0.0"
+            }
+        },
+        "node_modules/@angular/cdk/node_modules/parse5": {
+            "version": "5.1.1",
+            "resolved": "https://registry.npmjs.org/parse5/-/parse5-5.1.1.tgz",
+            "integrity": "sha512-ugq4DFI0Ptb+WWjAdOK16+u/nHfiIrcE+sh8kZMaM0WllQKLI9rOUq6c2b7cwPkXdzfQESqvoqK6ug7U/Yyzug==",
+            "optional": true
+        },
         "node_modules/@angular/cli": {
             "version": "7.3.3",
             "resolved": "https://registry.npmjs.org/@angular/cli/-/cli-7.3.3.tgz",
@@ -1831,6 +1856,20 @@
                 "tslib": "^1.9.0"
             }
         },
+        "node_modules/@angular/flex-layout": {
+            "version": "7.0.0-beta.24",
+            "resolved": "https://registry.npmjs.org/@angular/flex-layout/-/flex-layout-7.0.0-beta.24.tgz",
+            "integrity": "sha512-ll6sK0nLGxqI/f5+z4jbd+pve1QITzgehv2AuGvfSDgIjPMeqUDB5YZqQmIGM/dQRk/vIio5KCW5LQPJWzMMYQ==",
+            "dependencies": {
+                "tslib": "^1.7.1"
+            },
+            "peerDependencies": {
+                "@angular/cdk": "^7.0.0-rc.0",
+                "@angular/common": ">=7.0.0-rc.0",
+                "@angular/core": ">=7.0.0-rc.0",
+                "rxjs": "^6.0.0"
+            }
+        },
         "node_modules/@angular/forms": {
             "version": "7.2.7",
             "resolved": "https://registry.npmjs.org/@angular/forms/-/forms-7.2.7.tgz",
@@ -1853,6 +1892,20 @@
             "integrity": "sha512-d3iCBpOfgLNSGMrtqZvN6NHZIEnKD2MV8Hz4WsRLU4WY0RbshZj5dqx2nO3YRT2tACpAvhWBQoYvtLpTCPzsMA==",
             "dev": true
         },
+        "node_modules/@angular/material": {
+            "version": "7.3.7",
+            "resolved": "https://registry.npmjs.org/@angular/material/-/material-7.3.7.tgz",
+            "integrity": "sha512-Eq+7frkeNGkLOfEtmkmJgR+AgoWajOipXZWWfCSamNfpCcPof82DwvGOpAmgGni9FuN2XFQdqP5MoaffQzIvUA==",
+            "dependencies": {
+                "tslib": "^1.7.1"
+            },
+            "peerDependencies": {
+                "@angular/animations": ">=7.0.0",
+                "@angular/cdk": "7.3.7",
+                "@angular/common": ">=7.0.0",
+                "@angular/core": ">=7.0.0"
+            }
+        },
         "node_modules/@angular/platform-browser": {
             "version": "7.2.7",
             "resolved": "https://registry.npmjs.org/@angular/platform-browser/-/platform-browser-7.2.7.tgz",
@@ -8598,7 +8651,11 @@
         "node_modules/ng2-file-upload": {
             "version": "1.3.0",
             "resolved": "https://registry.npmjs.org/ng2-file-upload/-/ng2-file-upload-1.3.0.tgz",
-            "integrity": "sha512-Pudxik6LWYsT8hNiEW7RfjgGWAnvfQywxwJYMdt1snTUe+KnlRc/QqPv3QEQW6plXTanuLkYz/TbqilSfSHOsw=="
+            "integrity": "sha512-Pudxik6LWYsT8hNiEW7RfjgGWAnvfQywxwJYMdt1snTUe+KnlRc/QqPv3QEQW6plXTanuLkYz/TbqilSfSHOsw==",
+            "peerDependencies": {
+                "@angular/common": "^2.3.1 || >=4.0.0",
+                "@angular/core": "^2.3.1 || >=4.0.0"
+            }
         },
         "node_modules/ng2-material-dropdown": {
             "version": "0.10.1",
@@ -14199,6 +14256,23 @@
                 "tslib": "^1.9.0"
             }
         },
+        "@angular/cdk": {
+            "version": "7.3.7",
+            "resolved": "https://registry.npmjs.org/@angular/cdk/-/cdk-7.3.7.tgz",
+            "integrity": "sha512-xbXxhHHKGkVuW6K7pzPmvpJXIwpl0ykBnvA2g+/7Sgy5Pd35wCC+UtHD9RYczDM/mkygNxMQtagyCErwFnDtQA==",
+            "requires": {
+                "parse5": "^5.0.0",
+                "tslib": "^1.7.1"
+            },
+            "dependencies": {
+                "parse5": {
+                    "version": "5.1.1",
+                    "resolved": "https://registry.npmjs.org/parse5/-/parse5-5.1.1.tgz",
+                    "integrity": "sha512-ugq4DFI0Ptb+WWjAdOK16+u/nHfiIrcE+sh8kZMaM0WllQKLI9rOUq6c2b7cwPkXdzfQESqvoqK6ug7U/Yyzug==",
+                    "optional": true
+                }
+            }
+        },
         "@angular/cli": {
             "version": "7.3.3",
             "resolved": "https://registry.npmjs.org/@angular/cli/-/cli-7.3.3.tgz",
@@ -15091,6 +15165,14 @@
                 "tslib": "^1.9.0"
             }
         },
+        "@angular/flex-layout": {
+            "version": "7.0.0-beta.24",
+            "resolved": "https://registry.npmjs.org/@angular/flex-layout/-/flex-layout-7.0.0-beta.24.tgz",
+            "integrity": "sha512-ll6sK0nLGxqI/f5+z4jbd+pve1QITzgehv2AuGvfSDgIjPMeqUDB5YZqQmIGM/dQRk/vIio5KCW5LQPJWzMMYQ==",
+            "requires": {
+                "tslib": "^1.7.1"
+            }
+        },
         "@angular/forms": {
             "version": "7.2.7",
             "resolved": "https://registry.npmjs.org/@angular/forms/-/forms-7.2.7.tgz",
@@ -15113,6 +15195,14 @@
             "integrity": "sha512-d3iCBpOfgLNSGMrtqZvN6NHZIEnKD2MV8Hz4WsRLU4WY0RbshZj5dqx2nO3YRT2tACpAvhWBQoYvtLpTCPzsMA==",
             "dev": true
         },
+        "@angular/material": {
+            "version": "7.3.7",
+            "resolved": "https://registry.npmjs.org/@angular/material/-/material-7.3.7.tgz",
+            "integrity": "sha512-Eq+7frkeNGkLOfEtmkmJgR+AgoWajOipXZWWfCSamNfpCcPof82DwvGOpAmgGni9FuN2XFQdqP5MoaffQzIvUA==",
+            "requires": {
+                "tslib": "^1.7.1"
+            }
+        },
         "@angular/platform-browser": {
             "version": "7.2.7",
             "resolved": "https://registry.npmjs.org/@angular/platform-browser/-/platform-browser-7.2.7.tgz",
@@ -20887,7 +20977,8 @@
         "ng2-file-upload": {
             "version": "1.3.0",
             "resolved": "https://registry.npmjs.org/ng2-file-upload/-/ng2-file-upload-1.3.0.tgz",
-            "integrity": "sha512-Pudxik6LWYsT8hNiEW7RfjgGWAnvfQywxwJYMdt1snTUe+KnlRc/QqPv3QEQW6plXTanuLkYz/TbqilSfSHOsw=="
+            "integrity": "sha512-Pudxik6LWYsT8hNiEW7RfjgGWAnvfQywxwJYMdt1snTUe+KnlRc/QqPv3QEQW6plXTanuLkYz/TbqilSfSHOsw==",
+            "requires": {}
         },
         "ng2-material-dropdown": {
             "version": "0.10.1",
diff --git a/org.eclipse.winery.frontends/package.json b/org.eclipse.winery.frontends/package.json
index 97ff09466..051037f8f 100644
--- a/org.eclipse.winery.frontends/package.json
+++ b/org.eclipse.winery.frontends/package.json
@@ -28,11 +28,14 @@
         "@angular-redux/store": "9.0.0",
         "@angular-slider/ngx-slider": "2.0.3",
         "@angular/animations": "7.2.7",
+        "@angular/cdk": "7.3.7",
         "@angular/common": "7.2.7",
         "@angular/compiler": "7.2.7",
         "@angular/core": "7.2.7",
+        "@angular/flex-layout": "7.0.0-beta.24",
         "@angular/forms": "7.2.7",
         "@angular/http": "7.2.7",
+        "@angular/material": "7.3.7",
         "@angular/platform-browser": "7.2.7",
         "@angular/platform-browser-dynamic": "7.2.7",
         "@angular/router": "7.2.7",
diff --git a/org.eclipse.winery.model.selfservice/pom.xml b/org.eclipse.winery.model.extension/pom.xml
similarity index 79%
rename from org.eclipse.winery.model.selfservice/pom.xml
rename to org.eclipse.winery.model.extension/pom.xml
index 08079f7e8..c3097a352 100644
--- a/org.eclipse.winery.model.selfservice/pom.xml
+++ b/org.eclipse.winery.model.extension/pom.xml
@@ -19,7 +19,7 @@
         <artifactId>winery</artifactId>
         <version>3.0.0-SNAPSHOT</version>
     </parent>
-    <artifactId>org.eclipse.winery.model.selfservice</artifactId>    
+    <artifactId>org.eclipse.winery.model.extension</artifactId>
     <properties>
         <checkstyle.config.location>../checkstyle.xml</checkstyle.config.location>
         <main.basedir>${project.parent.basedir}</main.basedir>
@@ -80,13 +80,29 @@
                 <version>1.5</version>
                 <executions>
                     <execution>
+                        <id>selfservice</id>
                         <phase>generate-sources</phase>
                         <goals>
                             <goal>xjc</goal>
                         </goals>
                         <configuration>
-                            <schemaDirectory>${project.basedir}/src/main/resources</schemaDirectory>
+                            <schemaDirectory>${project.basedir}/src/main/resources/selfservice</schemaDirectory>
                             <packageName>org.eclipse.winery.model.selfservice</packageName>
+                            <staleFile>${project.build.directory}/jaxb2/.xjcStaleFlag1</staleFile>
+                            <clearOutputDir>false</clearOutputDir>
+                        </configuration>
+                    </execution>
+                    <execution>
+                        <id>researchobject</id>
+                        <phase>generate-sources</phase>
+                        <goals>
+                            <goal>xjc</goal>
+                        </goals>
+                        <configuration>
+                            <schemaDirectory>${project.basedir}/src/main/resources/researchobject</schemaDirectory>
+                            <packageName>org.eclipse.winery.model.researchobject</packageName>
+                            <staleFile>${project.build.directory}/jaxb2/.xjcStaleFlag2</staleFile>
+                            <clearOutputDir>false</clearOutputDir>
                         </configuration>
                     </execution>
                 </executions>
diff --git a/org.eclipse.winery.model.extension/src/main/resources/researchobject/ResearchObjectModel.xsd b/org.eclipse.winery.model.extension/src/main/resources/researchobject/ResearchObjectModel.xsd
new file mode 100644
index 000000000..1a58f1d8a
--- /dev/null
+++ b/org.eclipse.winery.model.extension/src/main/resources/researchobject/ResearchObjectModel.xsd
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  ~ Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+  ~
+  ~ See the NOTICE file(s) distributed with this work for additional
+  ~ information regarding copyright ownership.
+  ~
+  ~ This program and the accompanying materials are made available under the
+  ~ terms of the Eclipse Public License 2.0 which is available at
+  ~ http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+  ~ which is available at https://www.apache.org/licenses/LICENSE-2.0.
+  ~
+  ~ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
+<xs:schema xmlns="http://www.eclipse.org/winery/model/researchobject"
+           targetNamespace="http://www.eclipse.org/winery/model/researchobject"
+           xmlns:xs="http://www.w3.org/2001/XMLSchema"
+           elementFormDefault="qualified">
+
+    <xs:element name="ResearchObject">
+        <xs:complexType>
+            <xs:sequence>
+                <xs:element name="Metadata">
+                    <xs:complexType>
+                        <xs:sequence>
+                            <xs:element name="title" type="xs:string"/>
+
+                            <xs:element name="author" type="xs:string"/>
+
+                            <xs:element name="contact" type="xs:string"/>
+
+                            <xs:element name="description" type="xs:string"/>
+
+                            <xs:element name="subjects">
+                                <xs:complexType>
+                                    <xs:sequence>
+                                        <xs:element type="xs:string" name="subject" maxOccurs="unbounded"
+                                                    minOccurs="0"/>
+                                    </xs:sequence>
+                                </xs:complexType>
+                            </xs:element>
+                        </xs:sequence>
+                    </xs:complexType>
+                </xs:element>
+                <xs:element name="Publication">
+                    <xs:complexType>
+                        <xs:sequence>
+                            <xs:element name="citation" type="xs:string"/>
+
+                            <xs:element name="idType" type="xs:string"/>
+
+                            <xs:element name="id" type="xs:string"/>
+
+                            <xs:element name="url" type="xs:string"/>
+                        </xs:sequence>
+                    </xs:complexType>
+                </xs:element>
+            </xs:sequence>
+        </xs:complexType>
+    </xs:element>
+</xs:schema>
diff --git a/org.eclipse.winery.model.selfservice/src/main/resources/SelfServiceModel.xsd b/org.eclipse.winery.model.extension/src/main/resources/selfservice/SelfServiceModel.xsd
similarity index 100%
rename from org.eclipse.winery.model.selfservice/src/main/resources/SelfServiceModel.xsd
rename to org.eclipse.winery.model.extension/src/main/resources/selfservice/SelfServiceModel.xsd
diff --git a/org.eclipse.winery.model.selfservice/src/test/java/.gitkeep b/org.eclipse.winery.model.extension/src/test/java/.gitkeep
similarity index 100%
rename from org.eclipse.winery.model.selfservice/src/test/java/.gitkeep
rename to org.eclipse.winery.model.extension/src/test/java/.gitkeep
diff --git a/org.eclipse.winery.model.selfservice/src/test/resources/logback-test.xml b/org.eclipse.winery.model.extension/src/test/resources/logback-test.xml
similarity index 100%
rename from org.eclipse.winery.model.selfservice/src/test/resources/logback-test.xml
rename to org.eclipse.winery.model.extension/src/test/resources/logback-test.xml
diff --git a/org.eclipse.winery.repository.rest/pom.xml b/org.eclipse.winery.repository.rest/pom.xml
index d381d705c..f27265b11 100644
--- a/org.eclipse.winery.repository.rest/pom.xml
+++ b/org.eclipse.winery.repository.rest/pom.xml
@@ -145,7 +145,7 @@
         </dependency>
         <dependency>
             <groupId>org.eclipse.winery</groupId>
-            <artifactId>org.eclipse.winery.model.selfservice</artifactId>
+            <artifactId>org.eclipse.winery.model.extension</artifactId>
             <version>${project.version}</version>
         </dependency>
         <dependency>
diff --git a/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/RestUtils.java b/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/RestUtils.java
index a078382e4..b414cbbc3 100644
--- a/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/RestUtils.java
+++ b/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/RestUtils.java
@@ -17,6 +17,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.StringWriter;
 import java.net.URI;
+import java.nio.file.Path;
 import java.nio.file.attribute.FileTime;
 import java.security.AccessControlException;
 import java.time.Duration;
@@ -33,6 +34,7 @@ import java.util.Objects;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.client.ClientBuilder;
@@ -69,11 +71,10 @@ import org.eclipse.winery.model.ids.definitions.RelationshipTypeId;
 import org.eclipse.winery.model.ids.definitions.RelationshipTypeImplementationId;
 import org.eclipse.winery.model.ids.definitions.ServiceTemplateId;
 import org.eclipse.winery.model.ids.elements.ToscaElementId;
-import org.eclipse.winery.model.selfservice.Application;
+import org.eclipse.winery.model.tosca.TDefinitions;
 import org.eclipse.winery.model.tosca.HasType;
 import org.eclipse.winery.model.tosca.TArtifactTemplate;
 import org.eclipse.winery.model.tosca.TConstraint;
-import org.eclipse.winery.model.tosca.TDefinitions;
 import org.eclipse.winery.model.tosca.TEntityTemplate;
 import org.eclipse.winery.model.tosca.TExtensibleElements;
 import org.eclipse.winery.model.tosca.TInterface;
@@ -240,8 +241,7 @@ public class RestUtils {
                 // check which options are chosen
                 if (options.isAddToProvenance()) {
                     // We wait for the accountability layer to confirm the transaction
-                    String result = exporter.writeCsarAndSaveManifestInProvenanceLayer(resource.getId(), output)
-                        .get();
+                    String result = exporter.writeCsarAndSaveManifestInProvenanceLayer(resource.getId(), output).get();
                     LOGGER.debug("Stored state in accountability layer in transaction " + result);
                 } else if (options.isIncludeDependencies() && resource.getId() instanceof ServiceTemplateId) {
                     SelfContainmentPackager packager = new SelfContainmentPackager(RepositoryFactory.getRepository());
@@ -257,15 +257,9 @@ public class RestUtils {
                 throw new WebApplicationException(e);
             }
         };
-        String contentDisposition = String.format("attachment;filename=\"%s%s\"",
-            resource.getXmlId().getEncoded(),
-            Constants.SUFFIX_CSAR);
-
-        return Response.ok()
-            .header("Content-Disposition", contentDisposition)
-            .type(MimeTypes.MIMETYPE_ZIP)
-            .entity(so)
-            .build();
+        String contentDisposition = String.format("attachment;filename=\"%s%s\"", resource.getXmlId().getEncoded(), Constants.SUFFIX_CSAR);
+
+        return Response.ok().header("Content-Disposition", contentDisposition).type(MimeTypes.MIMETYPE_ZIP).entity(so).build();
     }
 
     public static Response getYamlOfSelectedResource(DefinitionsChildId id) {
@@ -294,15 +288,9 @@ public class RestUtils {
                 throw new WebApplicationException(e);
             }
         };
-        String contentDisposition = String.format("attachment;filename=\"%s%s\"",
-            resource.getXmlId().getEncoded(),
-            Constants.SUFFIX_CSAR);
-
-        return Response.ok()
-            .header("Content-Disposition", contentDisposition)
-            .type(MimeTypes.MIMETYPE_ZIP)
-            .entity(so)
-            .build();
+        String contentDisposition = String.format("attachment;filename=\"%s%s\"", resource.getXmlId().getEncoded(), Constants.SUFFIX_CSAR);
+
+        return Response.ok().header("Content-Disposition", contentDisposition).type(MimeTypes.MIMETYPE_ZIP).entity(so).build();
     }
 
     public static EntityGraph getEdmmEntityGraph(TServiceTemplate element, boolean useAbsolutPaths) {
@@ -324,8 +312,7 @@ public class RestUtils {
             throw new IllegalStateException("No Relationship Types defined!");
         }
 
-        EdmmConverter edmmConverter = new EdmmConverter(nodeTypes, relationshipTypes, nodeTypeImplementations, relationshipTypeImplementations,
-            artifactTemplates, typeMappings, oneToOneMappings, useAbsolutPaths);
+        EdmmConverter edmmConverter = new EdmmConverter(nodeTypes, relationshipTypes, nodeTypeImplementations, relationshipTypeImplementations, artifactTemplates, typeMappings, oneToOneMappings, useAbsolutPaths);
 
         return edmmConverter.transform(element);
     }
@@ -337,10 +324,7 @@ public class RestUtils {
         StringWriter stringWriter = new StringWriter();
         transform.generateYamlOutput(stringWriter);
 
-        return Response.ok()
-            .type(MimeTypes.MIMETYPE_YAML)
-            .entity(stringWriter.toString())
-            .build();
+        return Response.ok().type(MimeTypes.MIMETYPE_YAML).entity(stringWriter.toString()).build();
     }
 
     /**
@@ -367,9 +351,7 @@ public class RestUtils {
                 throw new WebApplicationException(e);
             }
         };
-        String sb = "attachment;filename=\"" +
-            name +
-            "\"";
+        String sb = "attachment;filename=\"" + name + "\"";
         return Response.ok().header("Content-Disposition", sb).type(MimeTypes.MIMETYPE_ZIP).entity(so).build();
     }
 
@@ -487,10 +469,7 @@ public class RestUtils {
      * Checks whether a given resource (with absolute URL!) is available with a HEAD request on it.
      */
     public static boolean isResourceAvailable(String path) {
-        Response response = ClientBuilder.newClient()
-            .target(path)
-            .request()
-            .head();
+        Response response = ClientBuilder.newClient().target(path).request().head();
 
         return response.getStatusInfo().getFamily().equals(Family.SUCCESSFUL);
     }
@@ -660,9 +639,9 @@ public class RestUtils {
     /**
      * Persists the given object
      */
-    public static Response persist(Application application, RepositoryFileReference data_xml_ref, String mimeType) {
+    public static Response persist(Object object, RepositoryFileReference data_xml_ref, String mimeType) {
         try {
-            BackendUtils.persist(application, data_xml_ref, org.apache.tika.mime.MediaType.parse(mimeType), RepositoryFactory.getRepository());
+            BackendUtils.persist(object, data_xml_ref, org.apache.tika.mime.MediaType.parse(mimeType), RepositoryFactory.getRepository());
         } catch (IOException e) {
             LOGGER.debug("Could not persist resource", e);
             throw new WebApplicationException(e);
@@ -901,10 +880,7 @@ public class RestUtils {
             return Response.serverError();
         }
         // set filename
-        ContentDisposition contentDisposition = ContentDisposition.type("attachment")
-            .fileName(ref.getFileName())
-            .modificationDate(new Date(lastModified.toMillis()))
-            .build();
+        ContentDisposition contentDisposition = ContentDisposition.type("attachment").fileName(ref.getFileName()).modificationDate(new Date(lastModified.toMillis())).build();
         res.header("Content-Disposition", contentDisposition);
         res.header("Cache-Control", "max-age=0");
         return res;
@@ -941,6 +917,33 @@ public class RestUtils {
         return putContentToFile(ref, inputStream, org.apache.tika.mime.MediaType.parse(mediaType.toString()));
     }
 
+    public static Stream<Path> getAllDirsAndFiles(RepositoryFileReference ref, int depth) throws IOException {
+        return RepositoryFactory.getRepository().getAllDirsAndFiles(ref, depth);
+    }
+
+    public static Response move(RepositoryFileReference refSource, RepositoryFileReference refTarget) {
+        if (!RepositoryFactory.getRepository().exists(refSource)) {
+            return Response.status(Status.NOT_FOUND).build();
+        }
+        try {
+            RepositoryFactory.getRepository().move(refSource, refTarget);
+        } catch (IOException e) {
+            LOGGER.error(e.getMessage(), e);
+            return Response.serverError().entity(e.getMessage()).build();
+        }
+        return Response.noContent().build();
+    }
+
+    public static Response createDir(RepositoryFileReference ref) {
+        try {
+            RepositoryFactory.getRepository().createDir(ref);
+        } catch (IOException e) {
+            LOGGER.error(e.getMessage(), e);
+            return Response.serverError().entity(e.getMessage()).build();
+        }
+        return Response.noContent().build();
+    }
+
     /**
      * Updates the color if the color is not yet existent
      *
@@ -972,13 +975,11 @@ public class RestUtils {
 
     public static List<NamespaceAndDefinedLocalNamesForAngular> convert(List<NamespaceAndDefinedLocalNames> list) {
         return list.stream().map(namespaceAndDefinedLocalNames -> {
-            List<LocalNameForAngular> names = namespaceAndDefinedLocalNames.getDefinedLocalNames()
-                .stream().map(localName -> {
-                    final String id = "{" + namespaceAndDefinedLocalNames.getNamespace().getDecoded() + "}" + localName;
-                    return new LocalNameForAngular(id, localName);
-                }).collect(Collectors.toList());
-            return new NamespaceAndDefinedLocalNamesForAngular(
-                namespaceAndDefinedLocalNames.getNamespace(), names);
+            List<LocalNameForAngular> names = namespaceAndDefinedLocalNames.getDefinedLocalNames().stream().map(localName -> {
+                final String id = "{" + namespaceAndDefinedLocalNames.getNamespace().getDecoded() + "}" + localName;
+                return new LocalNameForAngular(id, localName);
+            }).collect(Collectors.toList());
+            return new NamespaceAndDefinedLocalNamesForAngular(namespaceAndDefinedLocalNames.getNamespace(), names);
         }).collect(Collectors.toList());
     }
 
@@ -1048,36 +1049,28 @@ public class RestUtils {
 
     public static <X extends DefinitionsChildId> List<QNameApiData> getAllElementsReferencingGivenType(Class<X> clazz, QName qNameOfTheType) {
         final QNameConverter adapter = new QNameConverter();
-        return RepositoryFactory.getRepository()
-            .getAllElementsReferencingGivenType(clazz, qNameOfTheType)
-            .stream()
-            .map(id -> adapter.marshal(id.getQName()))
-            .collect(Collectors.toList());
+        return RepositoryFactory.getRepository().getAllElementsReferencingGivenType(clazz, qNameOfTheType).stream().map(id -> adapter.marshal(id.getQName())).collect(Collectors.toList());
     }
 
-    public static List<ComponentId> getListOfIds(Set<? extends DefinitionsChildId> allDefinitionsChildIds,
-                                                 boolean includeFullDefinitions, boolean includeVersions) {
-        return allDefinitionsChildIds.stream()
-            .sorted()
-            .map(id -> {
-                String name = id.getXmlId().getDecoded();
-                TDefinitions definitions = null;
-                WineryVersion version = null;
-                if (Util.instanceSupportsNameAttribute(id.getClass())) {
-                    TExtensibleElements element = RepositoryFactory.getRepository().getElement(id);
-                    if (element instanceof IHasName) {
-                        name = ((IHasName) element).getName();
-                    }
-                }
-                if (includeFullDefinitions) {
-                    definitions = getFullComponentData(id);
+    public static List<ComponentId> getListOfIds(Set<? extends DefinitionsChildId> allDefinitionsChildIds, boolean includeFullDefinitions, boolean includeVersions) {
+        return allDefinitionsChildIds.stream().sorted().map(id -> {
+            String name = id.getXmlId().getDecoded();
+            TDefinitions definitions = null;
+            WineryVersion version = null;
+            if (Util.instanceSupportsNameAttribute(id.getClass())) {
+                TExtensibleElements element = RepositoryFactory.getRepository().getElement(id);
+                if (element instanceof IHasName) {
+                    name = ((IHasName) element).getName();
                 }
-                if (includeVersions) {
-                    version = VersionUtils.getVersion(id.getXmlId().getDecoded());
-                }
-                return new ComponentId(id.getXmlId().getDecoded(), name, id.getNamespace().getDecoded(), id.getQName(), definitions, version);
-            })
-            .collect(Collectors.toList());
+            }
+            if (includeFullDefinitions) {
+                definitions = getFullComponentData(id);
+            }
+            if (includeVersions) {
+                version = VersionUtils.getVersion(id.getXmlId().getDecoded());
+            }
+            return new ComponentId(id.getXmlId().getDecoded(), name, id.getNamespace().getDecoded(), id.getQName(), definitions, version);
+        }).collect(Collectors.toList());
     }
 
     public static TDefinitions getFullComponentData(DefinitionsChildId id) {
diff --git a/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/apiData/FileApiData.java b/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/apiData/FileApiData.java
new file mode 100644
index 000000000..e8d9b0379
--- /dev/null
+++ b/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/apiData/FileApiData.java
@@ -0,0 +1,23 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+
+package org.eclipse.winery.repository.rest.resources.apiData;
+
+public class FileApiData {
+    public String path;
+    public String moveToPath;
+    
+    public FileApiData() {
+    }
+}
diff --git a/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/apiData/FileOrFolderElementApiData.java b/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/apiData/FileOrFolderElementApiData.java
new file mode 100644
index 000000000..f0eee8e7e
--- /dev/null
+++ b/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/apiData/FileOrFolderElementApiData.java
@@ -0,0 +1,74 @@
+/*******************************************************************************
+ * Copyright (c) 2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+
+package org.eclipse.winery.repository.rest.resources.apiData;
+
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.attribute.FileTime;
+import java.time.LocalDateTime;
+import java.time.ZoneId;
+import java.time.format.DateTimeFormatter;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement(name = "FileOrFolderElement")
+@XmlAccessorType(XmlAccessType.FIELD)
+public class FileOrFolderElementApiData {
+
+    public boolean isFile;
+    public String name;
+    public long size;
+    public String modified;
+
+    public FileOrFolderElementApiData(boolean isFolder, String name, long size, String modified) {
+        this.isFile = isFolder;
+        this.name = name;
+        this.size = size;
+        this.modified = modified;
+    }
+
+    public FileOrFolderElementApiData(Path file) {
+        this.isFile = !Files.isDirectory(file);
+        this.name = file.getFileName().toString();
+        if (this.isFile) {
+            try {
+                this.size = Files.size(file);
+            } catch (IOException e) {
+                e.printStackTrace();
+                this.size = 0;
+            }
+        } else {
+            this.size = 0;
+        }
+        try {
+            this.modified = formatTime(Files.getLastModifiedTime(file));
+        } catch (IOException e) {
+            e.printStackTrace();
+            this.modified = "-";
+        }
+    }
+
+    public static String formatTime(FileTime fileTime) {
+        LocalDateTime localDateTime = fileTime
+            .toInstant()
+            .atZone(ZoneId.systemDefault())
+            .toLocalDateTime();
+        return localDateTime.format(
+            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
+    }
+}
diff --git a/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/servicetemplates/ResearchObjectResource.java b/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/servicetemplates/ResearchObjectResource.java
new file mode 100644
index 000000000..948082ba9
--- /dev/null
+++ b/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/servicetemplates/ResearchObjectResource.java
@@ -0,0 +1,192 @@
+/*******************************************************************************
+ * Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+
+package org.eclipse.winery.repository.rest.resources.servicetemplates;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.DELETE;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.PUT;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
+import org.eclipse.winery.model.ids.definitions.ServiceTemplateId;
+import org.eclipse.winery.model.researchobject.ResearchObject;
+import org.eclipse.winery.repository.backend.IRepository;
+import org.eclipse.winery.repository.backend.RepositoryFactory;
+import org.eclipse.winery.repository.backend.ResearchObjectUtils;
+import org.eclipse.winery.repository.common.RepositoryFileReference;
+import org.eclipse.winery.repository.datatypes.ids.elements.ResearchObjectDirectoryId;
+import org.eclipse.winery.repository.datatypes.ids.elements.ResearchObjectFilesDirectoryId;
+import org.eclipse.winery.repository.rest.RestUtils;
+import org.eclipse.winery.repository.rest.resources.apiData.FileOrFolderElementApiData;
+import org.eclipse.winery.repository.rest.resources.apiData.FileApiData;
+
+import org.glassfish.jersey.media.multipart.FormDataBodyPart;
+import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
+import org.glassfish.jersey.media.multipart.FormDataParam;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static org.eclipse.winery.repository.backend.ResearchObjectUtils.correctPath;
+
+public class ResearchObjectResource {
+    private static final Logger LOGGER = LoggerFactory.getLogger(ResearchObjectResource.class);
+
+    public final RepositoryFileReference metadata_xml_ref;
+    public final RepositoryFileReference files_ref;
+    private final ResearchObjectDirectoryId researchObjectDirectoryId;
+    private final ResearchObjectFilesDirectoryId researchObjectFilesDirectoryId;
+    private final IRepository repository;
+    private final java.nio.file.Path filesPath;
+
+    public ResearchObjectResource(ServiceTemplateResource serviceTemplateResource) {
+        this((ServiceTemplateId) serviceTemplateResource.getId());
+    }
+
+    public ResearchObjectResource(ServiceTemplateId serviceTemplateId) {
+        this.repository = RepositoryFactory.getRepository();
+        this.researchObjectDirectoryId = new ResearchObjectDirectoryId(serviceTemplateId);
+        this.researchObjectFilesDirectoryId = new ResearchObjectFilesDirectoryId(researchObjectDirectoryId);
+        this.metadata_xml_ref = ResearchObjectUtils.getMetaDataXmlRef(this.researchObjectDirectoryId);
+        this.files_ref = ResearchObjectUtils.getFilesRef(this.researchObjectDirectoryId);
+        this.filesPath = ResearchObjectUtils.getFilesPath(this.repository, this.files_ref);
+    }
+
+    @GET
+    @Path("metadata")
+    @Produces( {MediaType.APPLICATION_JSON, MediaType.TEXT_XML, MediaType.APPLICATION_XML})
+    public ResearchObject.Metadata getMetadata() {
+        return ResearchObjectUtils.getResearchObjectMetadata(repository, this.researchObjectDirectoryId);
+    }
+
+    @PUT
+    @Path("metadata")
+    @Consumes(MediaType.APPLICATION_JSON)
+    public Response putMetadata(ResearchObject.Metadata metadata) {
+        String content = ResearchObjectUtils.putResearchObjectMetadata(metadata, repository, this.researchObjectDirectoryId);
+        return RestUtils.putContentToFile(this.metadata_xml_ref, content, MediaType.TEXT_XML_TYPE);
+    }
+
+    @GET
+    @Path("publication")
+    @Produces( {MediaType.APPLICATION_JSON, MediaType.TEXT_XML, MediaType.APPLICATION_XML})
+    public ResearchObject.Publication getPublication() {
+        return ResearchObjectUtils.getResearchObjectPublication(repository, this.researchObjectDirectoryId);
+    }
+
+    @PUT
+    @Path("publication")
+    @Consumes(MediaType.APPLICATION_JSON)
+    public Response putPublication(ResearchObject.Publication publication) {
+        String content = ResearchObjectUtils.putResearchObjectPublication(publication, repository, this.researchObjectDirectoryId);
+        return RestUtils.putContentToFile(this.metadata_xml_ref, content, MediaType.TEXT_XML_TYPE);
+    }
+
+    @PUT
+    @Path("files")
+    @Consumes(MediaType.MULTIPART_FORM_DATA)
+    public Response putFile(@FormDataParam("file") InputStream uploadedInputStream, @FormDataParam("file") FormDataBodyPart body, @FormDataParam("file") FormDataContentDisposition fileDetail, @FormDataParam("path") FormDataBodyPart targetPath) {
+        RepositoryFileReference ref = new RepositoryFileReference(this.researchObjectFilesDirectoryId, Paths.get(correctPath(targetPath.getValue())), fileDetail.getFileName());
+        return RestUtils.putContentToFile(ref, uploadedInputStream, body.getMediaType());
+    }
+
+    @GET
+    @Path("files")
+    @Produces( {MediaType.APPLICATION_JSON, MediaType.TEXT_XML, MediaType.APPLICATION_XML})
+    public Map<String, List<FileOrFolderElementApiData>> getDirsAndFiles() {
+        Map<String, List<FileOrFolderElementApiData>> map = new HashMap<>();
+        int depth = this.filesPath.getNameCount();
+        try {
+            RestUtils.getAllDirsAndFiles(files_ref, Integer.MAX_VALUE).filter(file -> !file.equals(this.filesPath)).forEach(file -> {
+                    String path = file.subpath(depth - 1, file.getNameCount() - 1).toString().replaceFirst(files_ref.getFileName(), "");
+                    if (map.containsKey(path)) {
+                        map.get(path).add(new FileOrFolderElementApiData(file));
+                    } else {
+                        ArrayList<FileOrFolderElementApiData> list = new ArrayList<>();
+                        list.add(new FileOrFolderElementApiData(file));
+                        map.put(path, list);
+                    }
+                }
+            );
+        } catch (IOException e) {
+            LOGGER.error("Failed to get the files stored on the disk. Reason {}", e.getMessage());
+        }
+        return map;
+    }
+
+    @DELETE
+    @Path("files")
+    @Consumes( {MediaType.APPLICATION_JSON, MediaType.TEXT_XML, MediaType.APPLICATION_XML})
+    public Response delete(FileApiData element) {
+        RepositoryFileReference ref = new RepositoryFileReference(this.researchObjectFilesDirectoryId, correctPath(element.path));
+        return RestUtils.delete(ref);
+    }
+
+    @POST
+    @Path("files")
+    @Consumes( {MediaType.APPLICATION_JSON, MediaType.TEXT_XML, MediaType.APPLICATION_XML})
+    public Response update(FileApiData fileApiData) {
+        if (fileApiData.moveToPath == null) {
+            return createDir(fileApiData.path);
+        } else {
+            return move(fileApiData.path, fileApiData.moveToPath);
+        }
+    }
+
+    public Response createDir(String newDir) {
+        RepositoryFileReference ref = new RepositoryFileReference(this.researchObjectFilesDirectoryId, correctPath(newDir));
+        return RestUtils.createDir(ref);
+    }
+
+    public Response move(String sourcePath, String targetPath) {
+        if (ResearchObjectUtils.isURL(sourcePath)) {
+            return downloadGitRepo(sourcePath, targetPath);
+        } else {
+            RepositoryFileReference sourceRef = new RepositoryFileReference(this.researchObjectFilesDirectoryId, correctPath(sourcePath));
+            RepositoryFileReference targetRef = new RepositoryFileReference(this.researchObjectFilesDirectoryId, correctPath(targetPath));
+            return RestUtils.move(sourceRef, targetRef);
+        }
+    }
+
+    public Response downloadGitRepo(String location, String targetPath) {
+        try {
+            URL url = new URL(location);
+            HttpURLConnection con = (HttpURLConnection) url.openConnection();
+            con.setRequestMethod("GET");
+            con.setInstanceFollowRedirects(true);
+            con.connect();
+            String fieldValue = con.getHeaderField("Content-Disposition");
+            String filename = fieldValue.substring(fieldValue.indexOf("filename=") + "filename=".length());
+            RepositoryFileReference ref = new RepositoryFileReference(this.researchObjectFilesDirectoryId, Paths.get(correctPath(targetPath)), filename);
+            return RestUtils.putContentToFile(ref, con.getInputStream(), org.apache.tika.mime.MediaType.parse("application/zip"));
+        } catch (IOException e) {
+            LOGGER.error("Failed to download the file from {}. Reason {}", location, e.getMessage());
+            return Response.serverError().entity(e.getMessage()).build();
+        }
+    }
+}
diff --git a/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/servicetemplates/ServiceTemplateResource.java b/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/servicetemplates/ServiceTemplateResource.java
index e1135020a..7a99ae704 100644
--- a/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/servicetemplates/ServiceTemplateResource.java
+++ b/org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/servicetemplates/ServiceTemplateResource.java
@@ -1,5 +1,5 @@
 /********************************************************************************
- * Copyright (c) 2012-2021 Contributors to the Eclipse Foundation
+ * Copyright (c) 2012-2022 Contributors to the Eclipse Foundation
  *
  * See the NOTICE file(s) distributed with this work for additional
  * information regarding copyright ownership.
@@ -247,6 +247,11 @@ public class ServiceTemplateResource extends AbstractComponentInstanceResourceCo
         return new SelfServicePortalResource(this, requestRepository);
     }
 
+    @Path("researchobject/")
+    public ResearchObjectResource getResearchObjectResource() {
+        return new ResearchObjectResource(this);
+    }
+
     @Path("boundarydefinitions/")
     public BoundaryDefinitionsResource getBoundaryDefinitionsResource() {
         TBoundaryDefinitions boundaryDefinitions = this.getServiceTemplate().getBoundaryDefinitions();
diff --git a/org.eclipse.winery.repository.rest/src/test/java/org/eclipse/winery/repository/rest/resources/entitytypes/nodetypes/NodeTypeResourceTest.java b/org.eclipse.winery.repository.rest/src/test/java/org/eclipse/winery/repository/rest/resources/entitytypes/nodetypes/NodeTypeResourceTest.java
index 55641334f..4fa7510f5 100644
--- a/org.eclipse.winery.repository.rest/src/test/java/org/eclipse/winery/repository/rest/resources/entitytypes/nodetypes/NodeTypeResourceTest.java
+++ b/org.eclipse.winery.repository.rest/src/test/java/org/eclipse/winery/repository/rest/resources/entitytypes/nodetypes/NodeTypeResourceTest.java
@@ -125,7 +125,7 @@ public class NodeTypeResourceTest extends AbstractResourceTest {
         this.assertPost("nodetypes/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fnodetypes%252Ffruits/baobab/tags/", "entitytypes/nodetypes/baobab_tag_step1_add.json");
         this.assertPost("nodetypes/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fnodetypes%252Ffruits/baobab/tags/", "entitytypes/nodetypes/baobab_tag_step2_add.json");
         this.assertGet("nodetypes/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fnodetypes%252Ffruits/baobab/tags/", "entitytypes/nodetypes/baobab_tag_step3_values.json");
-        this.assertDelete("nodetypes/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fnodetypes%252Ffruits/baobab/tags/1594499300/");
+        this.assertDelete("nodetypes/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fnodetypes%252Ffruits/baobab/tags/1959316837/");
         this.assertGet("nodetypes/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fnodetypes%252Ffruits/baobab/tags/", "entitytypes/nodetypes/baobab_tag_step5_values.json");
     }
 
diff --git a/org.eclipse.winery.repository.rest/src/test/java/org/eclipse/winery/repository/rest/resources/servicetemplates/boundarydefinitions/policies/PoliciesResourceTest.java b/org.eclipse.winery.repository.rest/src/test/java/org/eclipse/winery/repository/rest/resources/servicetemplates/boundarydefinitions/policies/PoliciesResourceTest.java
index 4a458f5d1..eaedb122f 100644
--- a/org.eclipse.winery.repository.rest/src/test/java/org/eclipse/winery/repository/rest/resources/servicetemplates/boundarydefinitions/policies/PoliciesResourceTest.java
+++ b/org.eclipse.winery.repository.rest/src/test/java/org/eclipse/winery/repository/rest/resources/servicetemplates/boundarydefinitions/policies/PoliciesResourceTest.java
@@ -39,7 +39,7 @@ public class PoliciesResourceTest extends AbstractResourceTest {
         this.setRevisionTo("3cad4e459a8af6082097eab8f978c80b4f5a512e");
         // TODO make this more resilient against changes in the serialization of the working model
         //  by obtaining the id of the solitary policy with an additional request
-        this.assertDelete("servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplate/boundarydefinitions/policies/1793006451/");
+        this.assertDelete("servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplate/boundarydefinitions/policies/463939892/");
         this.assertGet("servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplate/boundarydefinitions/policies/", "entitytypes/empty_array.json");
     }
 }
diff --git a/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/nodetypes/baobab_tag_step3_values.json b/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/nodetypes/baobab_tag_step3_values.json
index e9a3d0644..cf40bf03a 100644
--- a/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/nodetypes/baobab_tag_step3_values.json
+++ b/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/nodetypes/baobab_tag_step3_values.json
@@ -1,13 +1,12 @@
 [
     {
-        "id": "1594499300",
+        "id": "1959316837",
         "name": "tag1",
         "value": "value1"
     },
     {
-        "id": "-312797500",
+        "id": "-966202555",
         "name": "tag2",
         "value": "value2"
     }
-]
-
+]
\ No newline at end of file
diff --git a/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/nodetypes/baobab_tag_step5_values.json b/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/nodetypes/baobab_tag_step5_values.json
index 9d204976d..7a02dbf26 100644
--- a/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/nodetypes/baobab_tag_step5_values.json
+++ b/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/nodetypes/baobab_tag_step5_values.json
@@ -1,6 +1,6 @@
 [
     {
-        "id": "-312797500",
+        "id": "-966202555",
         "name": "tag2",
         "value": "value2"
     }
diff --git a/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/servicetemplates/boundarydefinitions/policies/initialPolicy.json b/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/servicetemplates/boundarydefinitions/policies/initialPolicy.json
index 468283fae..b972e7915 100644
--- a/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/servicetemplates/boundarydefinitions/policies/initialPolicy.json
+++ b/org.eclipse.winery.repository.rest/src/test/resources/entitytypes/servicetemplates/boundarydefinitions/policies/initialPolicy.json
@@ -9,6 +9,6 @@
         "name": "grape",
         "policyType": "{http://winery.opentosca.org/test/policytypes/fruits}european",
         "policyRef": "{http://winery.opentosca.org/test/policytemplates/fruits}italian",
-        "id": "1793006451"
+        "id": "463939892"
     }
 ]
diff --git a/org.eclipse.winery.repository/pom.xml b/org.eclipse.winery.repository/pom.xml
index 4fcb8cf77..e6d35ff24 100644
--- a/org.eclipse.winery.repository/pom.xml
+++ b/org.eclipse.winery.repository/pom.xml
@@ -94,7 +94,7 @@
         </dependency>
         <dependency>
             <groupId>org.eclipse.winery</groupId>
-            <artifactId>org.eclipse.winery.model.selfservice</artifactId>
+            <artifactId>org.eclipse.winery.model.extension</artifactId>
             <version>${project.version}</version>
         </dependency>
         <dependency>
diff --git a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/JAXBSupport.java b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/JAXBSupport.java
index cd9e1e498..bd27a8921 100644
--- a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/JAXBSupport.java
+++ b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/JAXBSupport.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2012-2020 Contributors to the Eclipse Foundation
+ * Copyright (c) 2012-2022 Contributors to the Eclipse Foundation
  *
  * See the NOTICE file(s) distributed with this work for additional
  * information regarding copyright ownership.
@@ -19,8 +19,9 @@ import javax.xml.bind.Marshaller;
 import javax.xml.bind.PropertyException;
 import javax.xml.bind.Unmarshaller;
 
-import org.eclipse.winery.model.jaxbsupport.map.PropertiesAdapter;
+import org.eclipse.winery.model.researchobject.ResearchObject;
 import org.eclipse.winery.model.selfservice.Application;
+import org.eclipse.winery.model.jaxbsupport.map.PropertiesAdapter;
 import org.eclipse.winery.model.tosca.TDefinitions;
 import org.eclipse.winery.model.tosca.TEntityTemplate;
 import org.eclipse.winery.model.tosca.extensions.kvproperties.WinerysPropertiesDefinition;
@@ -51,6 +52,7 @@ public class JAXBSupport {
                 TDefinitions.class, // all other elements are referred by "@XmlSeeAlso"
                 WinerysPropertiesDefinition.class,
                 Application.class,
+                ResearchObject.class,
                 MockXMLElement.class, // MockXMLElement is added for testing purposes only.
                 TEntityTemplate.XmlProperties.class // required because we're not XmlSeeAlso referring it
             );
diff --git a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/IRepository.java b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/IRepository.java
index 47f4af554..d31a4f260 100644
--- a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/IRepository.java
+++ b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/IRepository.java
@@ -38,6 +38,7 @@ import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 import javax.xml.namespace.QName;
 
@@ -201,6 +202,12 @@ public interface IRepository extends IWineryRepositoryCommon {
      */
     void putContentToFile(RepositoryFileReference ref, InputStream inputStream, MediaType mediaType) throws IOException;
 
+    Stream<Path> getAllDirsAndFiles(RepositoryFileReference ref, int depth) throws IOException;
+
+    Path move(RepositoryFileReference refSource, RepositoryFileReference refTarget) throws IOException;
+
+    void createDir(RepositoryFileReference ref) throws IOException;
+
     /**
      * Serializes the given content at a location that the repository makes as belonging to the given id. This acts as a
      * replacement for all invocations of {@link #putContentToFile} for the media type {@link
diff --git a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/ResearchObjectUtils.java b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/ResearchObjectUtils.java
new file mode 100644
index 000000000..c44899af4
--- /dev/null
+++ b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/ResearchObjectUtils.java
@@ -0,0 +1,112 @@
+/*******************************************************************************
+ * Copyright (c) 2021-2022 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+package org.eclipse.winery.repository.backend;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+import javax.xml.bind.JAXBException;
+import javax.xml.bind.Unmarshaller;
+
+import org.eclipse.winery.common.Constants;
+import org.eclipse.winery.model.researchobject.ResearchObject;
+import org.eclipse.winery.repository.JAXBSupport;
+
+import org.eclipse.winery.repository.common.RepositoryFileReference;
+import org.eclipse.winery.repository.datatypes.ids.elements.ResearchObjectDirectoryId;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class ResearchObjectUtils {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(ResearchObjectUtils.class);
+
+    public static RepositoryFileReference getMetaDataXmlRef(ResearchObjectDirectoryId id) {
+        return new RepositoryFileReference(id, Constants.DIRNAME_RESEARCH_OBJECT_METADATA_FILE);
+    }
+
+    public static RepositoryFileReference getFilesRef(ResearchObjectDirectoryId id) {
+        return new RepositoryFileReference(id, Constants.DIRNAME_RESEARCH_OBJECT_FILES);
+    }
+
+    public static Path getFilesPath(IRepository repository, RepositoryFileReference files_ref) {
+        return Paths.get(repository.getRepositoryRoot().toString(), BackendUtils.getPathInsideRepo(files_ref));
+    }
+
+    private static ResearchObject getResearchObject(IRepository repository, ResearchObjectDirectoryId id) {
+        RepositoryFileReference data_xml_ref = getMetaDataXmlRef(id);
+        if (repository.exists(data_xml_ref)) {
+            Unmarshaller u = JAXBSupport.createUnmarshaller();
+            try (InputStream is = repository.newInputStream(data_xml_ref)) {
+                return (ResearchObject) u.unmarshal(is);
+            } catch (IOException | JAXBException e) {
+                LOGGER.error("Could not read from " + data_xml_ref, e);
+                return new ResearchObject();
+            }
+        } else {
+            LOGGER.info("No MetaData is stored for ResearchObject " + id);
+            return new ResearchObject();
+        }
+    }
+
+    public static ResearchObject.Metadata getResearchObjectMetadata(IRepository repository, ResearchObjectDirectoryId id) {
+        ResearchObject.Metadata metadata = getResearchObject(repository, id).getMetadata();
+        if (metadata == null) {
+            metadata = new ResearchObject.Metadata();
+        }
+        return metadata;
+    }
+
+    public static String putResearchObjectMetadata(ResearchObject.Metadata metadata, IRepository repository, ResearchObjectDirectoryId id) {
+        ResearchObject ro = getResearchObject(repository, id);
+        ro.setMetadata(metadata);
+        return BackendUtils.getXMLAsString(ro, repository);
+    }
+
+    public static ResearchObject.Publication getResearchObjectPublication(IRepository repository, ResearchObjectDirectoryId id) {
+        ResearchObject.Publication publication = getResearchObject(repository, id).getPublication();
+        if (publication == null) {
+            publication = new ResearchObject.Publication();
+        }
+        return publication;
+    }
+
+    public static String putResearchObjectPublication(ResearchObject.Publication publication, IRepository repository, ResearchObjectDirectoryId id) {
+        ResearchObject ro = getResearchObject(repository, id);
+        ro.setPublication(publication);
+        return BackendUtils.getXMLAsString(ro, repository);
+    }
+
+    public static String correctPath(String pathString) {
+        Path path = Paths.get(pathString);
+        if (path.startsWith(File.separator)) {
+            return path.toString().substring(1);
+        }
+        return path.toString();
+    }
+
+    public static boolean isURL(String url) {
+        try {
+            new URL(url);
+            return true;
+        } catch (Exception e) {
+            return false;
+        }
+    }
+}
diff --git a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/AbstractFileBasedRepository.java b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/AbstractFileBasedRepository.java
index 3771196a4..91f9d4e03 100644
--- a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/AbstractFileBasedRepository.java
+++ b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/AbstractFileBasedRepository.java
@@ -41,6 +41,7 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.SortedSet;
 import java.util.TreeSet;
+import java.util.stream.Stream;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 import java.util.zip.ZipOutputStream;
@@ -98,7 +99,15 @@ public abstract class AbstractFileBasedRepository implements IRepository {
 
     public void forceDelete(RepositoryFileReference ref) throws IOException {
         Path relativePath = this.fileSystem.getPath(BackendUtils.getPathInsideRepo(ref));
-        Path fileToDelete = this.makeAbsolute(relativePath);
+        Path pathToDelete = this.makeAbsolute(relativePath);
+        if (Files.isDirectory(pathToDelete)) {
+            FileUtils.forceDelete(pathToDelete);
+        } else {
+            forceDeleteFile(pathToDelete, ref);
+        }
+    }
+
+    public void forceDeleteFile(Path fileToDelete, RepositoryFileReference ref) throws IOException {
         try {
             this.provider.delete(fileToDelete);
             // Quick hack for deletion of the mime type information
@@ -549,6 +558,22 @@ public abstract class AbstractFileBasedRepository implements IRepository {
         Files.write(path, content.getBytes());
     }
 
+    public Stream<Path> getAllDirsAndFiles(RepositoryFileReference ref, int depth) throws IOException {
+        Path path = this.ref2AbsolutePath(ref);
+        return Files.walk(path, depth);
+    }
+
+    public Path move(RepositoryFileReference refSource, RepositoryFileReference refTarget) throws IOException {
+        Path pathSource = this.ref2AbsolutePath(refSource);
+        Path pathTarget = this.ref2AbsolutePath(refTarget);
+        return Files.move(pathSource, pathTarget, StandardCopyOption.ATOMIC_MOVE);
+    }
+
+    public void createDir(RepositoryFileReference ref) throws IOException {
+        Path path = this.ref2AbsolutePath(ref);
+        FileUtils.createDirectory(path);
+    }
+
     public void writeInputStreamToPath(Path targetPath, InputStream inputStream) throws IOException {
         // ensure that parent directory exists
         FileUtils.createDirectory(targetPath.getParent());
diff --git a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/GitBasedRepository.java b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/GitBasedRepository.java
index b9b076127..aa4e484ea 100644
--- a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/GitBasedRepository.java
+++ b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/GitBasedRepository.java
@@ -32,6 +32,7 @@ import java.util.Map;
 import java.util.Optional;
 import java.util.SortedSet;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 import javax.xml.namespace.QName;
 
@@ -408,6 +409,21 @@ public class GitBasedRepository extends AbstractFileBasedRepository implements I
         }
     }
 
+    @Override
+    public Stream<Path> getAllDirsAndFiles(RepositoryFileReference ref, int depth) throws IOException {
+        return repository.getAllDirsAndFiles(ref, depth);
+    }
+
+    @Override
+    public Path move(RepositoryFileReference refSource, RepositoryFileReference refTarget) throws IOException {
+        return repository.move(refSource, refTarget);
+    }
+
+    @Override
+    public void createDir(RepositoryFileReference ref) throws IOException {
+        repository.createDir(ref);
+    }
+    
     @Override
     public boolean hasChangesInFile(DefinitionsChildId id) {
         RepositoryFileReference ref = BackendUtils.getRefOfDefinitions(id);
diff --git a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/datatypes/ids/elements/ResearchObjectDirectoryId.java b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/datatypes/ids/elements/ResearchObjectDirectoryId.java
new file mode 100644
index 000000000..1c1b48c0b
--- /dev/null
+++ b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/datatypes/ids/elements/ResearchObjectDirectoryId.java
@@ -0,0 +1,29 @@
+/*******************************************************************************
+ * Copyright (c) 2021 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+package org.eclipse.winery.repository.datatypes.ids.elements;
+
+import org.eclipse.winery.common.Constants;
+import org.eclipse.winery.model.ids.XmlId;
+import org.eclipse.winery.model.ids.definitions.ServiceTemplateId;
+import org.eclipse.winery.model.ids.elements.ToscaElementId;
+
+/**
+ * Id of the directory containing the research_object metadata
+ */
+public class ResearchObjectDirectoryId extends ToscaElementId {
+
+    public ResearchObjectDirectoryId(ServiceTemplateId parent) {
+        super(parent, new XmlId(Constants.DIRNAME_RESEARCH_OBJECT, true));
+    }
+}
diff --git a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/datatypes/ids/elements/ResearchObjectFilesDirectoryId.java b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/datatypes/ids/elements/ResearchObjectFilesDirectoryId.java
new file mode 100644
index 000000000..6d236bd7f
--- /dev/null
+++ b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/datatypes/ids/elements/ResearchObjectFilesDirectoryId.java
@@ -0,0 +1,28 @@
+/*******************************************************************************
+ * Copyright (c) 2021 Contributors to the Eclipse Foundation
+ *
+ * See the NOTICE file(s) distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
+ * which is available at https://www.apache.org/licenses/LICENSE-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
+ *******************************************************************************/
+package org.eclipse.winery.repository.datatypes.ids.elements;
+
+import org.eclipse.winery.common.Constants;
+import org.eclipse.winery.model.ids.XmlId;
+import org.eclipse.winery.model.ids.elements.ToscaElementId;
+
+/**
+ * Id of the directory containing the research_object files
+ */
+public class ResearchObjectFilesDirectoryId extends ToscaElementId {
+
+    public ResearchObjectFilesDirectoryId(ResearchObjectDirectoryId parent) {
+        super(parent, new XmlId(Constants.DIRNAME_RESEARCH_OBJECT_FILES, true));
+    }
+}
diff --git a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/filebased/MultiRepository.java b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/filebased/MultiRepository.java
index 51aa4eea6..68d364792 100644
--- a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/filebased/MultiRepository.java
+++ b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/filebased/MultiRepository.java
@@ -34,6 +34,7 @@ import java.util.Optional;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
+import java.util.stream.Stream;
 
 import org.eclipse.winery.common.Constants;
 import org.eclipse.winery.common.configuration.FileBasedRepositoryConfiguration;
@@ -479,6 +480,24 @@ public class MultiRepository implements IWrappingRepository {
         addNamespacesToRepository(repository, ref);
     }
 
+    @Override
+    public Stream<Path> getAllDirsAndFiles(RepositoryFileReference ref, int depth) throws IOException {
+        IRepository repository = RepositoryUtils.getRepositoryByRef(ref, this);
+        return repository.getAllDirsAndFiles(ref, depth);
+    }
+
+    @Override
+    public void createDir(RepositoryFileReference ref) throws IOException {
+        IRepository repository = RepositoryUtils.getRepositoryByRef(ref, this);
+        repository.createDir(ref);
+    }
+
+    @Override
+    public Path move(RepositoryFileReference sourceRef, RepositoryFileReference targetRef) throws IOException {
+        IRepository repository = RepositoryUtils.getRepositoryByRef(sourceRef, this);
+        return repository.move(sourceRef, targetRef);
+    }
+
     @Override
     public void putDefinition(RepositoryFileReference ref, TDefinitions content) throws IOException {
         IRepository repository = RepositoryUtils.getRepositoryByRef(ref, this);
diff --git a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/filebased/TenantRepository.java b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/filebased/TenantRepository.java
index 40c690a1c..24cfaf620 100644
--- a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/filebased/TenantRepository.java
+++ b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/filebased/TenantRepository.java
@@ -26,6 +26,7 @@ import java.util.Date;
 import java.util.List;
 import java.util.SortedSet;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.stream.Stream;
 
 import org.eclipse.winery.common.configuration.Environments;
 import org.eclipse.winery.common.configuration.FileBasedRepositoryConfiguration;
@@ -137,6 +138,21 @@ public class TenantRepository implements IWrappingRepository {
         getRepository().putContentToFile(ref, inputStream, mediaType);
     }
 
+    @Override
+    public Stream<Path> getAllDirsAndFiles(RepositoryFileReference ref, int depth) throws IOException {
+        return getRepository().getAllDirsAndFiles(ref, depth);
+    }
+
+    @Override
+    public void createDir(RepositoryFileReference ref) throws IOException {
+        getRepository().createDir(ref);
+    }
+
+    @Override
+    public Path move(RepositoryFileReference sourceRef, RepositoryFileReference targetRef) throws IOException {
+        return getRepository().move(sourceRef, targetRef);
+    }
+
     @Override
     public void putDefinition(RepositoryFileReference ref, TDefinitions content) throws IOException {
         getRepository().putDefinition(ref, content);
diff --git a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/xml/XmlRepository.java b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/xml/XmlRepository.java
index c6986b9d7..d2505241d 100644
--- a/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/xml/XmlRepository.java
+++ b/org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/xml/XmlRepository.java
@@ -111,7 +111,10 @@ public class XmlRepository extends AbstractFileBasedRepository {
                 throw new IllegalStateException(e);
             }
         } else {
-            this.setMimeType(ref, mediaType);
+            // another quick hack; storing the mime type is not required for research object files
+            if (!ref.getParent().getXmlId().getDecoded().equals(Constants.DIRNAME_RESEARCH_OBJECT_FILES) && !ref.getParent().getParent().getXmlId().getDecoded().equals(Constants.DIRNAME_RESEARCH_OBJECT)) {
+                this.setMimeType(ref, mediaType);
+            }
             Path targetPath = this.ref2AbsolutePath(ref);
             writeInputStreamToPath(targetPath, inputStream);
         }
diff --git a/pom.xml b/pom.xml
index 1146984ea..220ed6af0 100644
--- a/pom.xml
+++ b/pom.xml
@@ -124,7 +124,7 @@
                 <module>org.eclipse.winery.model.adaptation</module>
                 <module>org.eclipse.winery.model.bpmn4tosca</module>
                 <module>org.eclipse.winery.model.csar.toscametafile</module>
-                <module>org.eclipse.winery.model.selfservice</module>
+                <module>org.eclipse.winery.model.extension</module>
                 <module>org.eclipse.winery.model.threatmodeling</module>
                 <module>org.eclipse.winery.reporting</module>
                 <module>org.eclipse.winery.repository</module>
@@ -157,7 +157,7 @@
                 <module>org.eclipse.winery.model.adaptation</module>
                 <module>org.eclipse.winery.model.bpmn4tosca</module>
                 <module>org.eclipse.winery.model.csar.toscametafile</module>
-                <module>org.eclipse.winery.model.selfservice</module>
+                <module>org.eclipse.winery.model.extension</module>
                 <module>org.eclipse.winery.model.threatmodeling</module>
                 <module>org.eclipse.winery.reporting</module>
                 <module>org.eclipse.winery.repository</module>
-- 
2.36.0.windows.1

