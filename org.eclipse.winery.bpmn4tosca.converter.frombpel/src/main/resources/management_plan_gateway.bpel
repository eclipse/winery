<!--

    /*******************************************************************************
     * Copyright (c) 2015-2017 University of Stuttgart.
     * Copyright (c) 2017 ZTE Corporation.
     * All rights reserved. This program and the accompanying materials
     * are made available under the terms of the Eclipse Public License v1.0
     * and the Apache License 2.0 which both accompany this distribution,
     * and are available at http://www.eclipse.org/legal/epl-v10.html
     * and http://www.apache.org/licenses/LICENSE-2.0
     *
     * Contributors:
     *     Sebastian Wagner - initial API and implementation
     *     ZTE - support of more gateways
     *******************************************************************************/

-->

<process xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ManagementPlan"
	xmlns:tns="http://iaas.uni-stuttgart.de/bpmn4tosca/managementplan/"
	targetNamespace="http://iaas.uni-stuttgart.de/bpmn4tosca/managementplan/"
	xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
	xmlns:bpel4RestLight="http://iaas.uni-stuttgart.de/bpel/extensions/bpel4restlight"
	xmlns:si="http://siserver.org/wsdl"
	xmlns:sischema="http://siserver.org/schema"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:ode="http://www.apache.org/ode/type/extension">

<import namespace="http://siserver.org/wsdl" location="invoker.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"></import>
	<import importType="http://schemas.xmlsoap.org/wsdl/" location="management_plan.wsdl"
		namespace="http://iaas.uni-stuttgart.de/bpmn4tosca/managementplan/" /> <!-- Todo place_holder wsdl and namespace -->

	<extensions>
		<extension mustUnderstand="yes"
			namespace="http://iaas.uni-stuttgart.de/bpel/extensions/bpel4restlight" />
	</extensions>

	<partnerLinks>
		<partnerLink name="clientPL" initializePartnerRole="yes"
			partnerLinkType="tns:ManagementPlanPLT" myRole="ManagementPlanProvider"
			partnerRole="ManagementPlanClient" />

		<partnerLink name="serviceInvokerPL"
			initializePartnerRole="yes" partnerLinkType="tns:OpenTOSCAServiceInvokerPLT"
			myRole="ServiceInvokerClient"  partnerRole="ServiceInvoker"  />
	</partnerLinks>

	<variables>
		<variable name="input" messageType="tns:planInputMessage" />
		<variable name="output" messageType="tns:planOutputMessage" />
		<variable name="instanceDataAPIUrl" type="xsd:string" />

		<!-- The values for these variables must be provided in the instantiating
			input message -->
		<variable name="containerAPIServiceInstanceURL" type="xsd:string" />
		<variable name="csarId" type="xsd:string" />
		<!-- TODO: Should be derived from serviceTemplateIdNamespaceURI and serviceTemplateIdLocalPart
			(or vice versa) -->
		<variable name="serviceTemplateId" type="xsd:string" />
		<variable name="serviceTemplateIdNamespaceURI" type="xsd:string" />
		<variable name="serviceTemplateIdLocalPart" type="xsd:string" />
		<variable name="serviceInstanceId" type="xsd:string" />
		<variable name="correlationId" type="xsd:string" />
		<variable name="planCallbackUrl" type="xsd:string" />

		<!-- Holds response of service instance creation performed by activity createServiceInstance  -->
		<variable name="serviceInstanceCreationResponse" type="xsd:string" />

		<!-- Variable to store service instance -->
		<variable name="serviceInstanceData" type="xsd:anyType" />



		<!-- Variable to store service invoker requests and responses -->
		<variable name="siAsynchInput" messageType="si:invokeOperationAsyncMessage" />
		<variable name="siResponse" messageType="si:invokeResponse" />

		<!--  Variables for debugging purposes -->
		<variable name="dbg_mangementOperationRequest" messageType="si:invokeOperationAsyncMessage" />

	</variables>

	<correlationSets>
		<correlationSet name="ServiceInvokerCS"
			properties="tns:ServiceInvokerRequestProperty" />
	</correlationSets>



	<sequence>
		<receive createInstance="yes" name="initiate" operation="initiatePlan"
			partnerLink="clientPL" portType="tns:ManagementPlanPT" variable="input" />

		<!-- Get values for variables 'instanceDataAPIUrl', 'csarId', 'serviceTemplateId',
			'serviceInstanceId' from input message These values are required to read/write
			properties of the service instance the plan is working on -->
		<assign name="initFromInputMsg" validate="no">
			<copy>
				<from variable="input" part="payload">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='containerAPIServiceInstanceURL']/text()]]></query>
				</from>
				<to variable="containerAPIServiceInstanceURL" />
			</copy>
			<copy>
				<from variable="input" part="payload">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='csarId']/text()]]></query>
				</from>
				<to variable="csarId" />
			</copy>
			<copy>
				<from variable="input" part="payload">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='serviceTemplateId']/text()]]></query>
				</from>
				<to variable="serviceTemplateId" />
			</copy>
			<copy>
				<from variable="input" part="payload">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='serviceTemplateIdNamespaceURI']/text()]]></query>
				</from>
				<to variable="serviceTemplateIdNamespaceURI" />
			</copy>
			<copy>
				<from variable="input" part="payload">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='serviceTemplateIdLocalPart']/text()]]></query>
				</from>
				<to variable="serviceTemplateIdLocalPart" />
			</copy>
			<!-- <copy> <from variable="input" part="payload"> <query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='serviceInstanceId']/text()]]></query>
				</from> <to variable="serviceInstanceId" /> </copy> -->
			<copy>
				<from variable="input" part="payload">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='planCallbackUrl']/text()]]></query>
				</from>
				<to variable="planCallbackUrl" />
			</copy>
			<!-- Copy input parameters defined in start event -->

		</assign>


		<!-- If no serviceInstanceId was passed with the plan input message it
			is assumed that this is a build plan Hence, a service instance has to be
			created before excuting management operations -->
		<if>
			<condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0">
				boolean($input.payload/*[local-name()='serviceInstanceId']/text()[1])
			</condition>
			<assign>
				<copy>
					<from variable="input" part="payload">
						<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='serviceInstanceId']/text()]]></query>
					</from>
					<to variable="serviceInstanceId" />
				</copy>
			</assign>
			<else>
				<sequence>
					<extensionActivity>
						<bpel4RestLight:POST accept="application/xml"
							name="createServiceInstance" response="serviceInstanceCreationResponse"
							uri="$bpelvar[containerAPIServiceInstanceURL]/serviceInstances?csarID=$bpelvar[csarId]&amp;serviceTemplateID=$bpelvar[serviceTemplateId]" />
					</extensionActivity>
					<assign>
						<copy>
							<from variable="serviceInstanceCreationResponse">
								<query xmlns:pp="http://opentosca.org/api/pp" xmlns:xlink="http://www.w3.org/1999/xlink"
									queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0">
								<![CDATA[string(//pp:link/@xlink:href)]]>
								</query>
							</from>
							<to variable="serviceInstanceId" />
						</copy>
					</assign>
				</sequence>
			</else>
		</if>
		<extensionActivity>
			<bpel4RestLight:GET name="getServiceInstanceData"
				accept="application/xml" response="serviceInstanceData"
				uri="$bpelvar[containerAPIServiceInstanceURL]/serviceInstances?csarID=$bpelvar[csarId]&amp;serviceTemplateID=$bpelvar[serviceTemplateId]" />
		</extensionActivity>

		<!-- Perform management operations -->
					<!--

	/*******************************************************************************
	 * Copyright (c) 2017 ZTE Corporation.
	 * All rights reserved. This program and the accompanying materials
	 * are made available under the terms of the Eclipse Public License v1.0
	 * and the Apache License 2.0 which both accompany this distribution,
	 * and are available at http://www.eclipse.org/legal/epl-v10.html
	 * and http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Contributors:
	 *     ZTE - support of more gateways
	 *******************************************************************************/

-->



	<!--

    /*******************************************************************************
     * Copyright (c) 2015-2017 University of Stuttgart.
     * Copyright (c) 2017 ZTE Corporation.
     * All rights reserved. This program and the accompanying materials
     * are made available under the terms of the Eclipse Public License v1.0
     * and the Apache License 2.0 which both accompany this distribution,
     * and are available at http://www.eclipse.org/legal/epl-v10.html
     * and http://www.apache.org/licenses/LICENSE-2.0
     *
     * Contributors:
     *     Sebastian Wagner - initial API and implementation
     *     ZTE - support of more gateways
     *******************************************************************************/

-->



<scope name="ia1" xmlns:pp="http://opentosca.org/api/pp"
	xmlns:xlink="http://www.w3.org/1999/xlink">

	<!-- Template requires global variable 'serviceInstanceId'
	     Template defines following placeholders:
	     $mngmt_scope_name - Should become the name of the management task
	     $taskInputTargetNodeTemplateSet - All ids of node templates where input data for management operation are retrieved from
	     $taskOutputTargetNodeTemplateSet - All ids of node templates where output data of management operation are written to
	     $inputOutputNodeTemplateSet - All node template ids accessed by management operation, i.e.
	    							   set union of $taskInputTargetNodeTemplateSet and $taskOutputTargetNodeTemplateSet
	     [org.eclipse.winery.bpmn2bpel.model.param.StringParameter@3b2da18f, org.eclipse.winery.bpmn2bpel.model.param.StringParameter@5906ebcb, org.eclipse.winery.bpmn2bpel.model.param.StringParameter@258e2e41] - All input data of management operation
	     [] - All output data of management operation
	  -->

	<variables>
		<!-- Must contain a <pp:nodeInstanceList> element with exactly one child
			<pp::nodeinstances> which contains exactly one child named <pp:link href="nodeInstanceId"> -->
		<variable name="nodeInstanceUrlList" type="xsd:anyType" /> <!-- TODO set correct type -->
		<variable name="nodeInstanceUrl" type="xsd:string" />
		<variable name="mangementOperationRequest" messageType="si:invokeOperationAsyncMessage" />
		<variable name="mangementOperationResponse" messageType="si:invokeResponse" />

		<!--  Variables holding the URLs of node instances of node templates and their properties  -->


	</variables>
	<sequence name="ia1_Sequence">


		<!-- Retrieve node instance URLs of the instances of all nodes templates used either as input and output of this management operation -->




		<!-- Create input message for task ia1 -->
		<assign name="createManagementOperationInput" validate="no">
			<!-- Initialize input variable for asynch. call  -->
			<copy>
				<from>
					<literal>
						<sischema:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
							<sischema:CsarID></sischema:CsarID>
							<sischema:ServiceInstanceID></sischema:ServiceInstanceID>
							<sischema:NodeInstanceID></sischema:NodeInstanceID>
							<sischema:ServiceTemplateIDNamespaceURI></sischema:ServiceTemplateIDNamespaceURI>
							<sischema:ServiceTemplateIDLocalPart></sischema:ServiceTemplateIDLocalPart>
							<sischema:NodeTemplateID></sischema:NodeTemplateID>
							<sischema:InterfaceName></sischema:InterfaceName>
							<sischema:OperationName></sischema:OperationName>
							<sischema:ReplyTo/>
							<sischema:MessageID></sischema:MessageID>
							<sischema:Params>
								<!-- Create input parameters (payload) skeleton where the task input parameter values will be assigned to  -->
																	<sischema:Param>
		                                <sischema:key>remoteIP</sischema:key>
		                                <sischema:value></sischema:value>
		                            </sischema:Param>
																	<sischema:Param>
		                                <sischema:key>networkId</sischema:key>
		                                <sischema:value></sischema:value>
		                            </sischema:Param>
																	<sischema:Param>
		                                <sischema:key>deviceId</sischema:key>
		                                <sischema:value></sischema:value>
		                            </sischema:Param>
										                    </sischema:Params>
						</sischema:invokeOperationAsync>
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync" />
			</copy>
			<copy>
				<from variable="csarId" /> <!-- TODO frage an Olly: assigne dder hier jetzt nur den content oder die
					ganze variable mit tags, in BPELDesigner checken -->
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:CsarID]]></query>
				</to>
			</copy>
			<copy>
				<from variable="serviceInstanceId" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ServiceInstanceID]]></query>
				</to>
			</copy>
		<!-- 	<copy>
				<from variable="nodeInstanceUrl_$nodeTemplateIdLocalName" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:NodeInstanceID]]></query>
				</to>
			</copy>  -->
			<copy>
				<from variable="serviceTemplateIdNamespaceURI" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ServiceTemplateIDNamespaceURI]]></query>
				</to>
			</copy>
			<copy>
				<from variable="serviceTemplateIdLocalPart" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ServiceTemplateIDLocalPart]]></query>
				</to>
			</copy>
			<copy>
				<from>
					<literal>
						$nodeTemplateIdLocalName
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:NodeTemplateID]]></query>
				</to>
			</copy>
			<copy>
				<from>
					<literal>
						channel
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:InterfaceName]]></query>
				</to>
			</copy>
			<copy>
				<from>
					<literal>
						portDelete
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:OperationName]]></query>
				</to>
			</copy>
			<!-- The callback plan URL is provided in the message body and in the "ReplyTo" header TODO why in both?-->
			<copy>
				<from variable="planCallbackUrl" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ReplyTo]]></query>
				</to>
			</copy>
			 <!-- <copy>
				<from variable="planCallbackUrl" />
				<to variable="mangementOperationRequest" header="ReplyTo" />
			</copy> -->
			<copy>
				<!-- Generate unique message id used for correlation -->
				<from>
					$ode:pid
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:MessageID]]></query>
				</to>
			</copy>
			<!-- Copy blocks to assign parameter values.-->
												<!-- Assign string parameter value -->
					<copy>
						<from variable="properties_$nodeTemplateIdLocalName">
							<!-- Select relevant property from node instance properties and add it to the parameters list -->
							<literal>11</literal>
						</from>
						<to  variable="mangementOperationRequest" part="invokeOperationAsync">
							<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="remoteIP"]/following-sibling::*[local-name()="value"]]]></query>
						</to>
					</copy>
																<!-- Assign string parameter value -->
					<copy>
						<from variable="properties_$nodeTemplateIdLocalName">
							<!-- Select relevant property from node instance properties and add it to the parameters list -->
							<literal>111</literal>
						</from>
						<to  variable="mangementOperationRequest" part="invokeOperationAsync">
							<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="networkId"]/following-sibling::*[local-name()="value"]]]></query>
						</to>
					</copy>
																<!-- Assign string parameter value -->
					<copy>
						<from variable="properties_$nodeTemplateIdLocalName">
							<!-- Select relevant property from node instance properties and add it to the parameters list -->
							<literal>11111111</literal>
						</from>
						<to  variable="mangementOperationRequest" part="invokeOperationAsync">
							<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="deviceId"]/following-sibling::*[local-name()="value"]]]></query>
						</to>
					</copy>
									</assign>

		<assign name="copy2DbgVar">
			<copy>
				<from variable="mangementOperationRequest">
				</from>
				<to variable="dbg_mangementOperationRequest">
				</to>
			</copy>
		</assign>

		<!-- Call Service Invoker asynchronously -->
		<invoke name="call_ia1"
			inputVariable="mangementOperationRequest"
			operation="invokeOperationAsync"
			partnerLink="serviceInvokerPL"
			portType="si:InvokePortType">
		 	<correlations>
				<correlation initiate="join" set="ServiceInvokerCS" />
			</correlations>
		</invoke>

		<!-- Receive asynchronous response of the management task from Service Invoker   -->
		<receive name="receive_ia1_response"
			variable="mangementOperationResponse"
			operation="callback"
			partnerLink="serviceInvokerPL"
			portType="si:CallbackPortType">
			<correlations>
				<correlation initiate="no" set="ServiceInvokerCS" />
			</correlations>
		</receive>




		<!--Copy result of management operation to variables representing properties of node template  -->

		<!-- Store result of management operation, i.e. node template properties in container -->

	</sequence>
</scope>



					<!--

	/*******************************************************************************
	 * Copyright (c) 2017 ZTE Corporation.
	 * All rights reserved. This program and the accompanying materials
	 * are made available under the terms of the Eclipse Public License v1.0
	 * and the Apache License 2.0 which both accompany this distribution,
	 * and are available at http://www.eclipse.org/legal/epl-v10.html
	 * and http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Contributors:
	 *     ZTE - support of more gateways
	 *******************************************************************************/

-->



<!-- ExclusiveGateway  -->
	<!--

	/*******************************************************************************
	 * Copyright (c) 2017 ZTE Corporation.
	 * All rights reserved. This program and the accompanying materials
	 * are made available under the terms of the Eclipse Public License v1.0
	 * and the Apache License 2.0 which both accompany this distribution,
	 * and are available at http://www.eclipse.org/legal/epl-v10.html
	 * and http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Contributors:
	 *     ZTE - support of more gateways
	 *******************************************************************************/

-->



<!-- ExclusiveGateway  -->

<scope name="ExclusiveGateway" xmlns:pp="http://opentosca.org/api/pp"
	xmlns:xlink="http://www.w3.org/1999/xlink">
	<sequence name="ExclusiveGateway_Sequence">
		<if>
                    			<condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0">
                aaaaaaa
			</condition>
			<sequence name="ExclusiveGateway_Branch1_Sequence">
                                        <!--

	/*******************************************************************************
	 * Copyright (c) 2017 ZTE Corporation.
	 * All rights reserved. This program and the accompanying materials
	 * are made available under the terms of the Eclipse Public License v1.0
	 * and the Apache License 2.0 which both accompany this distribution,
	 * and are available at http://www.eclipse.org/legal/epl-v10.html
	 * and http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Contributors:
	 *     ZTE - support of more gateways
	 *******************************************************************************/

-->



	<!--

    /*******************************************************************************
     * Copyright (c) 2015-2017 University of Stuttgart.
     * Copyright (c) 2017 ZTE Corporation.
     * All rights reserved. This program and the accompanying materials
     * are made available under the terms of the Eclipse Public License v1.0
     * and the Apache License 2.0 which both accompany this distribution,
     * and are available at http://www.eclipse.org/legal/epl-v10.html
     * and http://www.apache.org/licenses/LICENSE-2.0
     *
     * Contributors:
     *     Sebastian Wagner - initial API and implementation
     *     ZTE - support of more gateways
     *******************************************************************************/

-->



<scope name="bia2" xmlns:pp="http://opentosca.org/api/pp"
	xmlns:xlink="http://www.w3.org/1999/xlink">

	<!-- Template requires global variable 'serviceInstanceId'
	     Template defines following placeholders:
	     $mngmt_scope_name - Should become the name of the management task
	     $taskInputTargetNodeTemplateSet - All ids of node templates where input data for management operation are retrieved from
	     $taskOutputTargetNodeTemplateSet - All ids of node templates where output data of management operation are written to
	     $inputOutputNodeTemplateSet - All node template ids accessed by management operation, i.e.
	    							   set union of $taskInputTargetNodeTemplateSet and $taskOutputTargetNodeTemplateSet
	     [org.eclipse.winery.bpmn2bpel.model.param.StringParameter@d83da2e, org.eclipse.winery.bpmn2bpel.model.param.StringParameter@a4102b8, org.eclipse.winery.bpmn2bpel.model.param.StringParameter@11dc3715] - All input data of management operation
	     [] - All output data of management operation
	  -->

	<variables>
		<!-- Must contain a <pp:nodeInstanceList> element with exactly one child
			<pp::nodeinstances> which contains exactly one child named <pp:link href="nodeInstanceId"> -->
		<variable name="nodeInstanceUrlList" type="xsd:anyType" /> <!-- TODO set correct type -->
		<variable name="nodeInstanceUrl" type="xsd:string" />
		<variable name="mangementOperationRequest" messageType="si:invokeOperationAsyncMessage" />
		<variable name="mangementOperationResponse" messageType="si:invokeResponse" />

		<!--  Variables holding the URLs of node instances of node templates and their properties  -->


	</variables>
	<sequence name="bia2_Sequence">


		<!-- Retrieve node instance URLs of the instances of all nodes templates used either as input and output of this management operation -->




		<!-- Create input message for task bia2 -->
		<assign name="createManagementOperationInput" validate="no">
			<!-- Initialize input variable for asynch. call  -->
			<copy>
				<from>
					<literal>
						<sischema:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
							<sischema:CsarID></sischema:CsarID>
							<sischema:ServiceInstanceID></sischema:ServiceInstanceID>
							<sischema:NodeInstanceID></sischema:NodeInstanceID>
							<sischema:ServiceTemplateIDNamespaceURI></sischema:ServiceTemplateIDNamespaceURI>
							<sischema:ServiceTemplateIDLocalPart></sischema:ServiceTemplateIDLocalPart>
							<sischema:NodeTemplateID></sischema:NodeTemplateID>
							<sischema:InterfaceName></sischema:InterfaceName>
							<sischema:OperationName></sischema:OperationName>
							<sischema:ReplyTo/>
							<sischema:MessageID></sischema:MessageID>
							<sischema:Params>
								<!-- Create input parameters (payload) skeleton where the task input parameter values will be assigned to  -->
																	<sischema:Param>
		                                <sischema:key>remoteIP</sischema:key>
		                                <sischema:value></sischema:value>
		                            </sischema:Param>
																	<sischema:Param>
		                                <sischema:key>networkId</sischema:key>
		                                <sischema:value></sischema:value>
		                            </sischema:Param>
																	<sischema:Param>
		                                <sischema:key>deviceId</sischema:key>
		                                <sischema:value></sischema:value>
		                            </sischema:Param>
										                    </sischema:Params>
						</sischema:invokeOperationAsync>
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync" />
			</copy>
			<copy>
				<from variable="csarId" /> <!-- TODO frage an Olly: assigne dder hier jetzt nur den content oder die
					ganze variable mit tags, in BPELDesigner checken -->
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:CsarID]]></query>
				</to>
			</copy>
			<copy>
				<from variable="serviceInstanceId" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ServiceInstanceID]]></query>
				</to>
			</copy>
		<!-- 	<copy>
				<from variable="nodeInstanceUrl_$nodeTemplateIdLocalName" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:NodeInstanceID]]></query>
				</to>
			</copy>  -->
			<copy>
				<from variable="serviceTemplateIdNamespaceURI" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ServiceTemplateIDNamespaceURI]]></query>
				</to>
			</copy>
			<copy>
				<from variable="serviceTemplateIdLocalPart" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ServiceTemplateIDLocalPart]]></query>
				</to>
			</copy>
			<copy>
				<from>
					<literal>
						$nodeTemplateIdLocalName
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:NodeTemplateID]]></query>
				</to>
			</copy>
			<copy>
				<from>
					<literal>
						channel
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:InterfaceName]]></query>
				</to>
			</copy>
			<copy>
				<from>
					<literal>
						portCreate
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:OperationName]]></query>
				</to>
			</copy>
			<!-- The callback plan URL is provided in the message body and in the "ReplyTo" header TODO why in both?-->
			<copy>
				<from variable="planCallbackUrl" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ReplyTo]]></query>
				</to>
			</copy>
			 <!-- <copy>
				<from variable="planCallbackUrl" />
				<to variable="mangementOperationRequest" header="ReplyTo" />
			</copy> -->
			<copy>
				<!-- Generate unique message id used for correlation -->
				<from>
					$ode:pid
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:MessageID]]></query>
				</to>
			</copy>
			<!-- Copy blocks to assign parameter values.-->
												<!-- Assign string parameter value -->
					<copy>
						<from variable="properties_$nodeTemplateIdLocalName">
							<!-- Select relevant property from node instance properties and add it to the parameters list -->
							<literal>1</literal>
						</from>
						<to  variable="mangementOperationRequest" part="invokeOperationAsync">
							<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="remoteIP"]/following-sibling::*[local-name()="value"]]]></query>
						</to>
					</copy>
																<!-- Assign string parameter value -->
					<copy>
						<from variable="properties_$nodeTemplateIdLocalName">
							<!-- Select relevant property from node instance properties and add it to the parameters list -->
							<literal>11</literal>
						</from>
						<to  variable="mangementOperationRequest" part="invokeOperationAsync">
							<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="networkId"]/following-sibling::*[local-name()="value"]]]></query>
						</to>
					</copy>
																<!-- Assign string parameter value -->
					<copy>
						<from variable="properties_$nodeTemplateIdLocalName">
							<!-- Select relevant property from node instance properties and add it to the parameters list -->
							<literal>111</literal>
						</from>
						<to  variable="mangementOperationRequest" part="invokeOperationAsync">
							<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="deviceId"]/following-sibling::*[local-name()="value"]]]></query>
						</to>
					</copy>
									</assign>

		<assign name="copy2DbgVar">
			<copy>
				<from variable="mangementOperationRequest">
				</from>
				<to variable="dbg_mangementOperationRequest">
				</to>
			</copy>
		</assign>

		<!-- Call Service Invoker asynchronously -->
		<invoke name="call_bia2"
			inputVariable="mangementOperationRequest"
			operation="invokeOperationAsync"
			partnerLink="serviceInvokerPL"
			portType="si:InvokePortType">
		 	<correlations>
				<correlation initiate="join" set="ServiceInvokerCS" />
			</correlations>
		</invoke>

		<!-- Receive asynchronous response of the management task from Service Invoker   -->
		<receive name="receive_bia2_response"
			variable="mangementOperationResponse"
			operation="callback"
			partnerLink="serviceInvokerPL"
			portType="si:CallbackPortType">
			<correlations>
				<correlation initiate="no" set="ServiceInvokerCS" />
			</correlations>
		</receive>




		<!--Copy result of management operation to variables representing properties of node template  -->

		<!-- Store result of management operation, i.e. node template properties in container -->

	</sequence>
</scope>



                			</sequence>

                                			<else>
				<sequence name="bia2_Branch2_Sequence">
                                                <!--

	/*******************************************************************************
	 * Copyright (c) 2017 ZTE Corporation.
	 * All rights reserved. This program and the accompanying materials
	 * are made available under the terms of the Eclipse Public License v1.0
	 * and the Apache License 2.0 which both accompany this distribution,
	 * and are available at http://www.eclipse.org/legal/epl-v10.html
	 * and http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Contributors:
	 *     ZTE - support of more gateways
	 *******************************************************************************/

-->



	<!--

    /*******************************************************************************
     * Copyright (c) 2015-2017 University of Stuttgart.
     * Copyright (c) 2017 ZTE Corporation.
     * All rights reserved. This program and the accompanying materials
     * are made available under the terms of the Eclipse Public License v1.0
     * and the Apache License 2.0 which both accompany this distribution,
     * and are available at http://www.eclipse.org/legal/epl-v10.html
     * and http://www.apache.org/licenses/LICENSE-2.0
     *
     * Contributors:
     *     Sebastian Wagner - initial API and implementation
     *     ZTE - support of more gateways
     *******************************************************************************/

-->



<scope name="bia1" xmlns:pp="http://opentosca.org/api/pp"
	xmlns:xlink="http://www.w3.org/1999/xlink">

	<!-- Template requires global variable 'serviceInstanceId'
	     Template defines following placeholders:
	     $mngmt_scope_name - Should become the name of the management task
	     $taskInputTargetNodeTemplateSet - All ids of node templates where input data for management operation are retrieved from
	     $taskOutputTargetNodeTemplateSet - All ids of node templates where output data of management operation are written to
	     $inputOutputNodeTemplateSet - All node template ids accessed by management operation, i.e.
	    							   set union of $taskInputTargetNodeTemplateSet and $taskOutputTargetNodeTemplateSet
	     [org.eclipse.winery.bpmn2bpel.model.param.StringParameter@8909f18, org.eclipse.winery.bpmn2bpel.model.param.StringParameter@79ca92b9, org.eclipse.winery.bpmn2bpel.model.param.StringParameter@1460a8c0] - All input data of management operation
	     [] - All output data of management operation
	  -->

	<variables>
		<!-- Must contain a <pp:nodeInstanceList> element with exactly one child
			<pp::nodeinstances> which contains exactly one child named <pp:link href="nodeInstanceId"> -->
		<variable name="nodeInstanceUrlList" type="xsd:anyType" /> <!-- TODO set correct type -->
		<variable name="nodeInstanceUrl" type="xsd:string" />
		<variable name="mangementOperationRequest" messageType="si:invokeOperationAsyncMessage" />
		<variable name="mangementOperationResponse" messageType="si:invokeResponse" />

		<!--  Variables holding the URLs of node instances of node templates and their properties  -->


	</variables>
	<sequence name="bia1_Sequence">


		<!-- Retrieve node instance URLs of the instances of all nodes templates used either as input and output of this management operation -->




		<!-- Create input message for task bia1 -->
		<assign name="createManagementOperationInput" validate="no">
			<!-- Initialize input variable for asynch. call  -->
			<copy>
				<from>
					<literal>
						<sischema:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
							<sischema:CsarID></sischema:CsarID>
							<sischema:ServiceInstanceID></sischema:ServiceInstanceID>
							<sischema:NodeInstanceID></sischema:NodeInstanceID>
							<sischema:ServiceTemplateIDNamespaceURI></sischema:ServiceTemplateIDNamespaceURI>
							<sischema:ServiceTemplateIDLocalPart></sischema:ServiceTemplateIDLocalPart>
							<sischema:NodeTemplateID></sischema:NodeTemplateID>
							<sischema:InterfaceName></sischema:InterfaceName>
							<sischema:OperationName></sischema:OperationName>
							<sischema:ReplyTo/>
							<sischema:MessageID></sischema:MessageID>
							<sischema:Params>
								<!-- Create input parameters (payload) skeleton where the task input parameter values will be assigned to  -->
																	<sischema:Param>
		                                <sischema:key>remoteIP</sischema:key>
		                                <sischema:value></sischema:value>
		                            </sischema:Param>
																	<sischema:Param>
		                                <sischema:key>networkId</sischema:key>
		                                <sischema:value></sischema:value>
		                            </sischema:Param>
																	<sischema:Param>
		                                <sischema:key>deviceId</sischema:key>
		                                <sischema:value></sischema:value>
		                            </sischema:Param>
										                    </sischema:Params>
						</sischema:invokeOperationAsync>
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync" />
			</copy>
			<copy>
				<from variable="csarId" /> <!-- TODO frage an Olly: assigne dder hier jetzt nur den content oder die
					ganze variable mit tags, in BPELDesigner checken -->
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:CsarID]]></query>
				</to>
			</copy>
			<copy>
				<from variable="serviceInstanceId" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ServiceInstanceID]]></query>
				</to>
			</copy>
		<!-- 	<copy>
				<from variable="nodeInstanceUrl_$nodeTemplateIdLocalName" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:NodeInstanceID]]></query>
				</to>
			</copy>  -->
			<copy>
				<from variable="serviceTemplateIdNamespaceURI" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ServiceTemplateIDNamespaceURI]]></query>
				</to>
			</copy>
			<copy>
				<from variable="serviceTemplateIdLocalPart" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ServiceTemplateIDLocalPart]]></query>
				</to>
			</copy>
			<copy>
				<from>
					<literal>
						$nodeTemplateIdLocalName
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:NodeTemplateID]]></query>
				</to>
			</copy>
			<copy>
				<from>
					<literal>
						channel
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:InterfaceName]]></query>
				</to>
			</copy>
			<copy>
				<from>
					<literal>
						portCreate
					</literal>
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:OperationName]]></query>
				</to>
			</copy>
			<!-- The callback plan URL is provided in the message body and in the "ReplyTo" header TODO why in both?-->
			<copy>
				<from variable="planCallbackUrl" />
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:ReplyTo]]></query>
				</to>
			</copy>
			 <!-- <copy>
				<from variable="planCallbackUrl" />
				<to variable="mangementOperationRequest" header="ReplyTo" />
			</copy> -->
			<copy>
				<!-- Generate unique message id used for correlation -->
				<from>
					$ode:pid
				</from>
				<to variable="mangementOperationRequest" part="invokeOperationAsync">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//sischema:invokeOperationAsync/sischema:MessageID]]></query>
				</to>
			</copy>
			<!-- Copy blocks to assign parameter values.-->
												<!-- Assign string parameter value -->
					<copy>
						<from variable="properties_$nodeTemplateIdLocalName">
							<!-- Select relevant property from node instance properties and add it to the parameters list -->
							<literal>111</literal>
						</from>
						<to  variable="mangementOperationRequest" part="invokeOperationAsync">
							<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="remoteIP"]/following-sibling::*[local-name()="value"]]]></query>
						</to>
					</copy>
																<!-- Assign string parameter value -->
					<copy>
						<from variable="properties_$nodeTemplateIdLocalName">
							<!-- Select relevant property from node instance properties and add it to the parameters list -->
							<literal>111</literal>
						</from>
						<to  variable="mangementOperationRequest" part="invokeOperationAsync">
							<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="networkId"]/following-sibling::*[local-name()="value"]]]></query>
						</to>
					</copy>
																<!-- Assign string parameter value -->
					<copy>
						<from variable="properties_$nodeTemplateIdLocalName">
							<!-- Select relevant property from node instance properties and add it to the parameters list -->
							<literal>111</literal>
						</from>
						<to  variable="mangementOperationRequest" part="invokeOperationAsync">
							<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="deviceId"]/following-sibling::*[local-name()="value"]]]></query>
						</to>
					</copy>
									</assign>

		<assign name="copy2DbgVar">
			<copy>
				<from variable="mangementOperationRequest">
				</from>
				<to variable="dbg_mangementOperationRequest">
				</to>
			</copy>
		</assign>

		<!-- Call Service Invoker asynchronously -->
		<invoke name="call_bia1"
			inputVariable="mangementOperationRequest"
			operation="invokeOperationAsync"
			partnerLink="serviceInvokerPL"
			portType="si:InvokePortType">
		 	<correlations>
				<correlation initiate="join" set="ServiceInvokerCS" />
			</correlations>
		</invoke>

		<!-- Receive asynchronous response of the management task from Service Invoker   -->
		<receive name="receive_bia1_response"
			variable="mangementOperationResponse"
			operation="callback"
			partnerLink="serviceInvokerPL"
			portType="si:CallbackPortType">
			<correlations>
				<correlation initiate="no" set="ServiceInvokerCS" />
			</correlations>
		</receive>




		<!--Copy result of management operation to variables representing properties of node template  -->

		<!-- Store result of management operation, i.e. node template properties in container -->

	</sequence>
</scope>



                    				</sequence>
			</else>
                    		</if>
	</sequence>
</scope>




		<!-- Send response of plan execution to client -->
		<assign name="createOutputMsg" validate="no">
			<copy>
				<from variable="correlationId" />
				<to variable="output" part="payload">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='correlationId']/text()]]></query>
				</to>
			</copy>
			<copy>
				<from variable="serviceInstanceId" />
				<to variable="output" part="payload">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='serviceInstanceId']/text()]]></query>
				</to>
			</copy>
			<copy>
				<from header="ReplyTo" variable="input">
					<query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()='Address']/text()]]></query>
				</from>
				<to endpointReference="partnerRole" partnerLink="clientPL" />
			</copy>
		</assign>
		<invoke name="callbackClient" inputVariable="output" operation="onResult"
			partnerLink="clientPL" portType="tns:ManagementPlanClientCallbackPT" />
	</sequence>
</process>
